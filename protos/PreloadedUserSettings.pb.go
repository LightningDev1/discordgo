// Credits to https://github.com/dolfies/discord-protos

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0--rc1
// source: protos/PreloadedUserSettings.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PreloadedUserSettings_InboxTab int32

const (
	PreloadedUserSettings_UNSPECIFIED  PreloadedUserSettings_InboxTab = 0
	PreloadedUserSettings_MENTIONS     PreloadedUserSettings_InboxTab = 1
	PreloadedUserSettings_UNREADS      PreloadedUserSettings_InboxTab = 2
	PreloadedUserSettings_TODOS        PreloadedUserSettings_InboxTab = 3
	PreloadedUserSettings_FOR_YOU      PreloadedUserSettings_InboxTab = 4
	PreloadedUserSettings_GAME_INVITES PreloadedUserSettings_InboxTab = 5
	PreloadedUserSettings_BOOKMARKS    PreloadedUserSettings_InboxTab = 6
)

// Enum value maps for PreloadedUserSettings_InboxTab.
var (
	PreloadedUserSettings_InboxTab_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MENTIONS",
		2: "UNREADS",
		3: "TODOS",
		4: "FOR_YOU",
		5: "GAME_INVITES",
		6: "BOOKMARKS",
	}
	PreloadedUserSettings_InboxTab_value = map[string]int32{
		"UNSPECIFIED":  0,
		"MENTIONS":     1,
		"UNREADS":      2,
		"TODOS":        3,
		"FOR_YOU":      4,
		"GAME_INVITES": 5,
		"BOOKMARKS":    6,
	}
)

func (x PreloadedUserSettings_InboxTab) Enum() *PreloadedUserSettings_InboxTab {
	p := new(PreloadedUserSettings_InboxTab)
	*p = x
	return p
}

func (x PreloadedUserSettings_InboxTab) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreloadedUserSettings_InboxTab) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_PreloadedUserSettings_proto_enumTypes[0].Descriptor()
}

func (PreloadedUserSettings_InboxTab) Type() protoreflect.EnumType {
	return &file_protos_PreloadedUserSettings_proto_enumTypes[0]
}

func (x PreloadedUserSettings_InboxTab) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreloadedUserSettings_InboxTab.Descriptor instead.
func (PreloadedUserSettings_InboxTab) EnumDescriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 0}
}

type PreloadedUserSettings_DmSpamFilterV2 int32

const (
	PreloadedUserSettings_DEFAULT_UNSET           PreloadedUserSettings_DmSpamFilterV2 = 0
	PreloadedUserSettings_DISABLED                PreloadedUserSettings_DmSpamFilterV2 = 1
	PreloadedUserSettings_NON_FRIENDS             PreloadedUserSettings_DmSpamFilterV2 = 2
	PreloadedUserSettings_FRIENDS_AND_NON_FRIENDS PreloadedUserSettings_DmSpamFilterV2 = 3
)

// Enum value maps for PreloadedUserSettings_DmSpamFilterV2.
var (
	PreloadedUserSettings_DmSpamFilterV2_name = map[int32]string{
		0: "DEFAULT_UNSET",
		1: "DISABLED",
		2: "NON_FRIENDS",
		3: "FRIENDS_AND_NON_FRIENDS",
	}
	PreloadedUserSettings_DmSpamFilterV2_value = map[string]int32{
		"DEFAULT_UNSET":           0,
		"DISABLED":                1,
		"NON_FRIENDS":             2,
		"FRIENDS_AND_NON_FRIENDS": 3,
	}
)

func (x PreloadedUserSettings_DmSpamFilterV2) Enum() *PreloadedUserSettings_DmSpamFilterV2 {
	p := new(PreloadedUserSettings_DmSpamFilterV2)
	*p = x
	return p
}

func (x PreloadedUserSettings_DmSpamFilterV2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreloadedUserSettings_DmSpamFilterV2) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_PreloadedUserSettings_proto_enumTypes[1].Descriptor()
}

func (PreloadedUserSettings_DmSpamFilterV2) Type() protoreflect.EnumType {
	return &file_protos_PreloadedUserSettings_proto_enumTypes[1]
}

func (x PreloadedUserSettings_DmSpamFilterV2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreloadedUserSettings_DmSpamFilterV2.Descriptor instead.
func (PreloadedUserSettings_DmSpamFilterV2) EnumDescriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 1}
}

type PreloadedUserSettings_ExplicitContentRedaction int32

const (
	PreloadedUserSettings_UNSET_EXPLICIT_CONTENT_REDACTION PreloadedUserSettings_ExplicitContentRedaction = 0
	PreloadedUserSettings_SHOW                             PreloadedUserSettings_ExplicitContentRedaction = 1
	PreloadedUserSettings_BLUR                             PreloadedUserSettings_ExplicitContentRedaction = 2
	PreloadedUserSettings_BLOCK                            PreloadedUserSettings_ExplicitContentRedaction = 3
)

// Enum value maps for PreloadedUserSettings_ExplicitContentRedaction.
var (
	PreloadedUserSettings_ExplicitContentRedaction_name = map[int32]string{
		0: "UNSET_EXPLICIT_CONTENT_REDACTION",
		1: "SHOW",
		2: "BLUR",
		3: "BLOCK",
	}
	PreloadedUserSettings_ExplicitContentRedaction_value = map[string]int32{
		"UNSET_EXPLICIT_CONTENT_REDACTION": 0,
		"SHOW":                             1,
		"BLUR":                             2,
		"BLOCK":                            3,
	}
)

func (x PreloadedUserSettings_ExplicitContentRedaction) Enum() *PreloadedUserSettings_ExplicitContentRedaction {
	p := new(PreloadedUserSettings_ExplicitContentRedaction)
	*p = x
	return p
}

func (x PreloadedUserSettings_ExplicitContentRedaction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreloadedUserSettings_ExplicitContentRedaction) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_PreloadedUserSettings_proto_enumTypes[2].Descriptor()
}

func (PreloadedUserSettings_ExplicitContentRedaction) Type() protoreflect.EnumType {
	return &file_protos_PreloadedUserSettings_proto_enumTypes[2]
}

func (x PreloadedUserSettings_ExplicitContentRedaction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreloadedUserSettings_ExplicitContentRedaction.Descriptor instead.
func (PreloadedUserSettings_ExplicitContentRedaction) EnumDescriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 2}
}

type PreloadedUserSettings_GuildActivityStatusRestrictionDefault int32

const (
	PreloadedUserSettings_OFF                 PreloadedUserSettings_GuildActivityStatusRestrictionDefault = 0
	PreloadedUserSettings_ON_FOR_LARGE_GUILDS PreloadedUserSettings_GuildActivityStatusRestrictionDefault = 1
)

// Enum value maps for PreloadedUserSettings_GuildActivityStatusRestrictionDefault.
var (
	PreloadedUserSettings_GuildActivityStatusRestrictionDefault_name = map[int32]string{
		0: "OFF",
		1: "ON_FOR_LARGE_GUILDS",
	}
	PreloadedUserSettings_GuildActivityStatusRestrictionDefault_value = map[string]int32{
		"OFF":                 0,
		"ON_FOR_LARGE_GUILDS": 1,
	}
)

func (x PreloadedUserSettings_GuildActivityStatusRestrictionDefault) Enum() *PreloadedUserSettings_GuildActivityStatusRestrictionDefault {
	p := new(PreloadedUserSettings_GuildActivityStatusRestrictionDefault)
	*p = x
	return p
}

func (x PreloadedUserSettings_GuildActivityStatusRestrictionDefault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreloadedUserSettings_GuildActivityStatusRestrictionDefault) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_PreloadedUserSettings_proto_enumTypes[3].Descriptor()
}

func (PreloadedUserSettings_GuildActivityStatusRestrictionDefault) Type() protoreflect.EnumType {
	return &file_protos_PreloadedUserSettings_proto_enumTypes[3]
}

func (x PreloadedUserSettings_GuildActivityStatusRestrictionDefault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreloadedUserSettings_GuildActivityStatusRestrictionDefault.Descriptor instead.
func (PreloadedUserSettings_GuildActivityStatusRestrictionDefault) EnumDescriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 3}
}

type PreloadedUserSettings_Theme int32

const (
	PreloadedUserSettings_UNSET    PreloadedUserSettings_Theme = 0
	PreloadedUserSettings_DARK     PreloadedUserSettings_Theme = 1
	PreloadedUserSettings_LIGHT    PreloadedUserSettings_Theme = 2
	PreloadedUserSettings_DARKER   PreloadedUserSettings_Theme = 3
	PreloadedUserSettings_MIDNIGHT PreloadedUserSettings_Theme = 4
)

// Enum value maps for PreloadedUserSettings_Theme.
var (
	PreloadedUserSettings_Theme_name = map[int32]string{
		0: "UNSET",
		1: "DARK",
		2: "LIGHT",
		3: "DARKER",
		4: "MIDNIGHT",
	}
	PreloadedUserSettings_Theme_value = map[string]int32{
		"UNSET":    0,
		"DARK":     1,
		"LIGHT":    2,
		"DARKER":   3,
		"MIDNIGHT": 4,
	}
)

func (x PreloadedUserSettings_Theme) Enum() *PreloadedUserSettings_Theme {
	p := new(PreloadedUserSettings_Theme)
	*p = x
	return p
}

func (x PreloadedUserSettings_Theme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreloadedUserSettings_Theme) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_PreloadedUserSettings_proto_enumTypes[4].Descriptor()
}

func (PreloadedUserSettings_Theme) Type() protoreflect.EnumType {
	return &file_protos_PreloadedUserSettings_proto_enumTypes[4]
}

func (x PreloadedUserSettings_Theme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreloadedUserSettings_Theme.Descriptor instead.
func (PreloadedUserSettings_Theme) EnumDescriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 4}
}

type PreloadedUserSettings_FavoriteChannelType int32

const (
	PreloadedUserSettings_UNSET_FAVORITE_CHANNEL_TYPE PreloadedUserSettings_FavoriteChannelType = 0
	PreloadedUserSettings_REFERENCE_ORIGINAL          PreloadedUserSettings_FavoriteChannelType = 1
	PreloadedUserSettings_CATEGORY                    PreloadedUserSettings_FavoriteChannelType = 2
)

// Enum value maps for PreloadedUserSettings_FavoriteChannelType.
var (
	PreloadedUserSettings_FavoriteChannelType_name = map[int32]string{
		0: "UNSET_FAVORITE_CHANNEL_TYPE",
		1: "REFERENCE_ORIGINAL",
		2: "CATEGORY",
	}
	PreloadedUserSettings_FavoriteChannelType_value = map[string]int32{
		"UNSET_FAVORITE_CHANNEL_TYPE": 0,
		"REFERENCE_ORIGINAL":          1,
		"CATEGORY":                    2,
	}
)

func (x PreloadedUserSettings_FavoriteChannelType) Enum() *PreloadedUserSettings_FavoriteChannelType {
	p := new(PreloadedUserSettings_FavoriteChannelType)
	*p = x
	return p
}

func (x PreloadedUserSettings_FavoriteChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreloadedUserSettings_FavoriteChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_PreloadedUserSettings_proto_enumTypes[5].Descriptor()
}

func (PreloadedUserSettings_FavoriteChannelType) Type() protoreflect.EnumType {
	return &file_protos_PreloadedUserSettings_proto_enumTypes[5]
}

func (x PreloadedUserSettings_FavoriteChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreloadedUserSettings_FavoriteChannelType.Descriptor instead.
func (PreloadedUserSettings_FavoriteChannelType) EnumDescriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 5}
}

type PreloadedUserSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions             *PreloadedUserSettings_Versions              `protobuf:"bytes,1,opt,name=versions,proto3,oneof" json:"versions,omitempty"`
	Inbox                *PreloadedUserSettings_InboxSettings         `protobuf:"bytes,2,opt,name=inbox,proto3,oneof" json:"inbox,omitempty"`
	Guilds               *PreloadedUserSettings_AllGuildSettings      `protobuf:"bytes,3,opt,name=guilds,proto3,oneof" json:"guilds,omitempty"`
	UserContent          *PreloadedUserSettings_UserContentSettings   `protobuf:"bytes,4,opt,name=user_content,json=userContent,proto3,oneof" json:"user_content,omitempty"`
	VoiceAndVideo        *PreloadedUserSettings_VoiceAndVideoSettings `protobuf:"bytes,5,opt,name=voice_and_video,json=voiceAndVideo,proto3,oneof" json:"voice_and_video,omitempty"`
	TextAndImages        *PreloadedUserSettings_TextAndImagesSettings `protobuf:"bytes,6,opt,name=text_and_images,json=textAndImages,proto3,oneof" json:"text_and_images,omitempty"`
	Notifications        *PreloadedUserSettings_NotificationSettings  `protobuf:"bytes,7,opt,name=notifications,proto3,oneof" json:"notifications,omitempty"`
	Privacy              *PreloadedUserSettings_PrivacySettings       `protobuf:"bytes,8,opt,name=privacy,proto3,oneof" json:"privacy,omitempty"`
	Debug                *PreloadedUserSettings_DebugSettings         `protobuf:"bytes,9,opt,name=debug,proto3,oneof" json:"debug,omitempty"`
	GameLibrary          *PreloadedUserSettings_GameLibrarySettings   `protobuf:"bytes,10,opt,name=game_library,json=gameLibrary,proto3,oneof" json:"game_library,omitempty"`
	Status               *PreloadedUserSettings_StatusSettings        `protobuf:"bytes,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Localization         *PreloadedUserSettings_LocalizationSettings  `protobuf:"bytes,12,opt,name=localization,proto3,oneof" json:"localization,omitempty"`
	Appearance           *PreloadedUserSettings_AppearanceSettings    `protobuf:"bytes,13,opt,name=appearance,proto3,oneof" json:"appearance,omitempty"`
	GuildFolders         *PreloadedUserSettings_GuildFolders          `protobuf:"bytes,14,opt,name=guild_folders,json=guildFolders,proto3,oneof" json:"guild_folders,omitempty"`
	Favorites            *PreloadedUserSettings_Favorites             `protobuf:"bytes,15,opt,name=favorites,proto3,oneof" json:"favorites,omitempty"`
	AudioContextSettings *PreloadedUserSettings_AudioSettings         `protobuf:"bytes,16,opt,name=audio_context_settings,json=audioContextSettings,proto3,oneof" json:"audio_context_settings,omitempty"`
	Communities          *PreloadedUserSettings_CommunitiesSettings   `protobuf:"bytes,17,opt,name=communities,proto3,oneof" json:"communities,omitempty"`
	Broadcast            *PreloadedUserSettings_BroadcastSettings     `protobuf:"bytes,18,opt,name=broadcast,proto3,oneof" json:"broadcast,omitempty"`
	Clips                *PreloadedUserSettings_ClipsSettings         `protobuf:"bytes,19,opt,name=clips,proto3,oneof" json:"clips,omitempty"`
}

func (x *PreloadedUserSettings) Reset() {
	*x = PreloadedUserSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings) ProtoMessage() {}

func (x *PreloadedUserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0}
}

func (x *PreloadedUserSettings) GetVersions() *PreloadedUserSettings_Versions {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *PreloadedUserSettings) GetInbox() *PreloadedUserSettings_InboxSettings {
	if x != nil {
		return x.Inbox
	}
	return nil
}

func (x *PreloadedUserSettings) GetGuilds() *PreloadedUserSettings_AllGuildSettings {
	if x != nil {
		return x.Guilds
	}
	return nil
}

func (x *PreloadedUserSettings) GetUserContent() *PreloadedUserSettings_UserContentSettings {
	if x != nil {
		return x.UserContent
	}
	return nil
}

func (x *PreloadedUserSettings) GetVoiceAndVideo() *PreloadedUserSettings_VoiceAndVideoSettings {
	if x != nil {
		return x.VoiceAndVideo
	}
	return nil
}

func (x *PreloadedUserSettings) GetTextAndImages() *PreloadedUserSettings_TextAndImagesSettings {
	if x != nil {
		return x.TextAndImages
	}
	return nil
}

func (x *PreloadedUserSettings) GetNotifications() *PreloadedUserSettings_NotificationSettings {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *PreloadedUserSettings) GetPrivacy() *PreloadedUserSettings_PrivacySettings {
	if x != nil {
		return x.Privacy
	}
	return nil
}

func (x *PreloadedUserSettings) GetDebug() *PreloadedUserSettings_DebugSettings {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *PreloadedUserSettings) GetGameLibrary() *PreloadedUserSettings_GameLibrarySettings {
	if x != nil {
		return x.GameLibrary
	}
	return nil
}

func (x *PreloadedUserSettings) GetStatus() *PreloadedUserSettings_StatusSettings {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PreloadedUserSettings) GetLocalization() *PreloadedUserSettings_LocalizationSettings {
	if x != nil {
		return x.Localization
	}
	return nil
}

func (x *PreloadedUserSettings) GetAppearance() *PreloadedUserSettings_AppearanceSettings {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *PreloadedUserSettings) GetGuildFolders() *PreloadedUserSettings_GuildFolders {
	if x != nil {
		return x.GuildFolders
	}
	return nil
}

func (x *PreloadedUserSettings) GetFavorites() *PreloadedUserSettings_Favorites {
	if x != nil {
		return x.Favorites
	}
	return nil
}

func (x *PreloadedUserSettings) GetAudioContextSettings() *PreloadedUserSettings_AudioSettings {
	if x != nil {
		return x.AudioContextSettings
	}
	return nil
}

func (x *PreloadedUserSettings) GetCommunities() *PreloadedUserSettings_CommunitiesSettings {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *PreloadedUserSettings) GetBroadcast() *PreloadedUserSettings_BroadcastSettings {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *PreloadedUserSettings) GetClips() *PreloadedUserSettings_ClipsSettings {
	if x != nil {
		return x.Clips
	}
	return nil
}

type PreloadedUserSettings_Versions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion uint32 `protobuf:"varint,1,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ServerVersion uint32 `protobuf:"varint,2,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	DataVersion   uint32 `protobuf:"varint,3,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
}

func (x *PreloadedUserSettings_Versions) Reset() {
	*x = PreloadedUserSettings_Versions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_Versions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_Versions) ProtoMessage() {}

func (x *PreloadedUserSettings_Versions) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_Versions.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_Versions) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PreloadedUserSettings_Versions) GetClientVersion() uint32 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

func (x *PreloadedUserSettings_Versions) GetServerVersion() uint32 {
	if x != nil {
		return x.ServerVersion
	}
	return 0
}

func (x *PreloadedUserSettings_Versions) GetDataVersion() uint32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

type PreloadedUserSettings_InboxSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTab     PreloadedUserSettings_InboxTab `protobuf:"varint,1,opt,name=current_tab,json=currentTab,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_InboxTab" json:"current_tab,omitempty"`
	ViewedTutorial bool                           `protobuf:"varint,2,opt,name=viewed_tutorial,json=viewedTutorial,proto3" json:"viewed_tutorial,omitempty"`
}

func (x *PreloadedUserSettings_InboxSettings) Reset() {
	*x = PreloadedUserSettings_InboxSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_InboxSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_InboxSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_InboxSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_InboxSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_InboxSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PreloadedUserSettings_InboxSettings) GetCurrentTab() PreloadedUserSettings_InboxTab {
	if x != nil {
		return x.CurrentTab
	}
	return PreloadedUserSettings_UNSPECIFIED
}

func (x *PreloadedUserSettings_InboxSettings) GetViewedTutorial() bool {
	if x != nil {
		return x.ViewedTutorial
	}
	return false
}

type PreloadedUserSettings_ChannelIconEmoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Color *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=color,proto3,oneof" json:"color,omitempty"`
}

func (x *PreloadedUserSettings_ChannelIconEmoji) Reset() {
	*x = PreloadedUserSettings_ChannelIconEmoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_ChannelIconEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_ChannelIconEmoji) ProtoMessage() {}

func (x *PreloadedUserSettings_ChannelIconEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_ChannelIconEmoji.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_ChannelIconEmoji) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PreloadedUserSettings_ChannelIconEmoji) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PreloadedUserSettings_ChannelIconEmoji) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PreloadedUserSettings_ChannelIconEmoji) GetColor() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type PreloadedUserSettings_CustomNotificationSoundConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationSoundPackId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=notification_sound_pack_id,json=notificationSoundPackId,proto3,oneof" json:"notification_sound_pack_id,omitempty"`
}

func (x *PreloadedUserSettings_CustomNotificationSoundConfig) Reset() {
	*x = PreloadedUserSettings_CustomNotificationSoundConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_CustomNotificationSoundConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_CustomNotificationSoundConfig) ProtoMessage() {}

func (x *PreloadedUserSettings_CustomNotificationSoundConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_CustomNotificationSoundConfig.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_CustomNotificationSoundConfig) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PreloadedUserSettings_CustomNotificationSoundConfig) GetNotificationSoundPackId() *wrapperspb.StringValue {
	if x != nil {
		return x.NotificationSoundPackId
	}
	return nil
}

type PreloadedUserSettings_ChannelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollapsedInInbox              bool                                                 `protobuf:"varint,1,opt,name=collapsed_in_inbox,json=collapsedInInbox,proto3" json:"collapsed_in_inbox,omitempty"`
	IconEmoji                     *PreloadedUserSettings_ChannelIconEmoji              `protobuf:"bytes,2,opt,name=icon_emoji,json=iconEmoji,proto3,oneof" json:"icon_emoji,omitempty"`
	CustomNotificationSoundConfig *PreloadedUserSettings_CustomNotificationSoundConfig `protobuf:"bytes,3,opt,name=custom_notification_sound_config,json=customNotificationSoundConfig,proto3,oneof" json:"custom_notification_sound_config,omitempty"`
}

func (x *PreloadedUserSettings_ChannelSettings) Reset() {
	*x = PreloadedUserSettings_ChannelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_ChannelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_ChannelSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_ChannelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_ChannelSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_ChannelSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PreloadedUserSettings_ChannelSettings) GetCollapsedInInbox() bool {
	if x != nil {
		return x.CollapsedInInbox
	}
	return false
}

func (x *PreloadedUserSettings_ChannelSettings) GetIconEmoji() *PreloadedUserSettings_ChannelIconEmoji {
	if x != nil {
		return x.IconEmoji
	}
	return nil
}

func (x *PreloadedUserSettings_ChannelSettings) GetCustomNotificationSoundConfig() *PreloadedUserSettings_CustomNotificationSoundConfig {
	if x != nil {
		return x.CustomNotificationSoundConfig
	}
	return nil
}

type PreloadedUserSettings_CustomCallSound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoundId uint64 `protobuf:"fixed64,1,opt,name=sound_id,json=soundId,proto3" json:"sound_id,omitempty"`
	GuildId uint64 `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *PreloadedUserSettings_CustomCallSound) Reset() {
	*x = PreloadedUserSettings_CustomCallSound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_CustomCallSound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_CustomCallSound) ProtoMessage() {}

func (x *PreloadedUserSettings_CustomCallSound) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_CustomCallSound.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_CustomCallSound) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PreloadedUserSettings_CustomCallSound) GetSoundId() uint64 {
	if x != nil {
		return x.SoundId
	}
	return 0
}

func (x *PreloadedUserSettings_CustomCallSound) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type PreloadedUserSettings_ChannelListSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=layout,proto3,oneof" json:"layout,omitempty"`
	MessagePreviews *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message_previews,json=messagePreviews,proto3,oneof" json:"message_previews,omitempty"`
}

func (x *PreloadedUserSettings_ChannelListSettings) Reset() {
	*x = PreloadedUserSettings_ChannelListSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_ChannelListSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_ChannelListSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_ChannelListSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_ChannelListSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_ChannelListSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PreloadedUserSettings_ChannelListSettings) GetLayout() *wrapperspb.StringValue {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *PreloadedUserSettings_ChannelListSettings) GetMessagePreviews() *wrapperspb.StringValue {
	if x != nil {
		return x.MessagePreviews
	}
	return nil
}

type PreloadedUserSettings_GuildSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels                          map[uint64]*PreloadedUserSettings_ChannelSettings    `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HubProgress                       uint32                                               `protobuf:"varint,2,opt,name=hub_progress,json=hubProgress,proto3" json:"hub_progress,omitempty"`
	GuildOnboardingProgress           uint32                                               `protobuf:"varint,3,opt,name=guild_onboarding_progress,json=guildOnboardingProgress,proto3" json:"guild_onboarding_progress,omitempty"`
	GuildRecentsDismissedAt           *timestamppb.Timestamp                               `protobuf:"bytes,4,opt,name=guild_recents_dismissed_at,json=guildRecentsDismissedAt,proto3,oneof" json:"guild_recents_dismissed_at,omitempty"`
	DismissedGuildContent             []byte                                               `protobuf:"bytes,5,opt,name=dismissed_guild_content,json=dismissedGuildContent,proto3" json:"dismissed_guild_content,omitempty"`
	JoinSound                         *PreloadedUserSettings_CustomCallSound               `protobuf:"bytes,6,opt,name=join_sound,json=joinSound,proto3,oneof" json:"join_sound,omitempty"`
	MobileRedesignChannelListSettings *PreloadedUserSettings_ChannelListSettings           `protobuf:"bytes,7,opt,name=mobile_redesign_channel_list_settings,json=mobileRedesignChannelListSettings,proto3,oneof" json:"mobile_redesign_channel_list_settings,omitempty"`
	DisableRaidAlertPush              bool                                                 `protobuf:"varint,8,opt,name=disable_raid_alert_push,json=disableRaidAlertPush,proto3" json:"disable_raid_alert_push,omitempty"`
	DisableRaidAlertNag               bool                                                 `protobuf:"varint,9,opt,name=disable_raid_alert_nag,json=disableRaidAlertNag,proto3" json:"disable_raid_alert_nag,omitempty"`
	CustomNotificationSoundConfig     *PreloadedUserSettings_CustomNotificationSoundConfig `protobuf:"bytes,10,opt,name=custom_notification_sound_config,json=customNotificationSoundConfig,proto3,oneof" json:"custom_notification_sound_config,omitempty"`
}

func (x *PreloadedUserSettings_GuildSettings) Reset() {
	*x = PreloadedUserSettings_GuildSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_GuildSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_GuildSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_GuildSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_GuildSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_GuildSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 7}
}

func (x *PreloadedUserSettings_GuildSettings) GetChannels() map[uint64]*PreloadedUserSettings_ChannelSettings {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *PreloadedUserSettings_GuildSettings) GetHubProgress() uint32 {
	if x != nil {
		return x.HubProgress
	}
	return 0
}

func (x *PreloadedUserSettings_GuildSettings) GetGuildOnboardingProgress() uint32 {
	if x != nil {
		return x.GuildOnboardingProgress
	}
	return 0
}

func (x *PreloadedUserSettings_GuildSettings) GetGuildRecentsDismissedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GuildRecentsDismissedAt
	}
	return nil
}

func (x *PreloadedUserSettings_GuildSettings) GetDismissedGuildContent() []byte {
	if x != nil {
		return x.DismissedGuildContent
	}
	return nil
}

func (x *PreloadedUserSettings_GuildSettings) GetJoinSound() *PreloadedUserSettings_CustomCallSound {
	if x != nil {
		return x.JoinSound
	}
	return nil
}

func (x *PreloadedUserSettings_GuildSettings) GetMobileRedesignChannelListSettings() *PreloadedUserSettings_ChannelListSettings {
	if x != nil {
		return x.MobileRedesignChannelListSettings
	}
	return nil
}

func (x *PreloadedUserSettings_GuildSettings) GetDisableRaidAlertPush() bool {
	if x != nil {
		return x.DisableRaidAlertPush
	}
	return false
}

func (x *PreloadedUserSettings_GuildSettings) GetDisableRaidAlertNag() bool {
	if x != nil {
		return x.DisableRaidAlertNag
	}
	return false
}

func (x *PreloadedUserSettings_GuildSettings) GetCustomNotificationSoundConfig() *PreloadedUserSettings_CustomNotificationSoundConfig {
	if x != nil {
		return x.CustomNotificationSoundConfig
	}
	return nil
}

type PreloadedUserSettings_AllGuildSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guilds map[uint64]*PreloadedUserSettings_GuildSettings `protobuf:"bytes,1,rep,name=guilds,proto3" json:"guilds,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PreloadedUserSettings_AllGuildSettings) Reset() {
	*x = PreloadedUserSettings_AllGuildSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_AllGuildSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_AllGuildSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_AllGuildSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_AllGuildSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_AllGuildSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 8}
}

func (x *PreloadedUserSettings_AllGuildSettings) GetGuilds() map[uint64]*PreloadedUserSettings_GuildSettings {
	if x != nil {
		return x.Guilds
	}
	return nil
}

type PreloadedUserSettings_RecurringDismissibleContentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastDismissedVersion uint32 `protobuf:"varint,1,opt,name=last_dismissed_version,json=lastDismissedVersion,proto3" json:"last_dismissed_version,omitempty"`
}

func (x *PreloadedUserSettings_RecurringDismissibleContentState) Reset() {
	*x = PreloadedUserSettings_RecurringDismissibleContentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_RecurringDismissibleContentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_RecurringDismissibleContentState) ProtoMessage() {}

func (x *PreloadedUserSettings_RecurringDismissibleContentState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_RecurringDismissibleContentState.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_RecurringDismissibleContentState) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 9}
}

func (x *PreloadedUserSettings_RecurringDismissibleContentState) GetLastDismissedVersion() uint32 {
	if x != nil {
		return x.LastDismissedVersion
	}
	return 0
}

type PreloadedUserSettings_UserContentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DismissedContents                       []byte                                                            `protobuf:"bytes,1,opt,name=dismissed_contents,json=dismissedContents,proto3" json:"dismissed_contents,omitempty"`
	LastDismissedOutboundPromotionStartDate *wrapperspb.StringValue                                           `protobuf:"bytes,2,opt,name=last_dismissed_outbound_promotion_start_date,json=lastDismissedOutboundPromotionStartDate,proto3,oneof" json:"last_dismissed_outbound_promotion_start_date,omitempty"`
	PremiumTier_0ModalDismissedAt           *timestamppb.Timestamp                                            `protobuf:"bytes,3,opt,name=premium_tier_0_modal_dismissed_at,json=premiumTier0ModalDismissedAt,proto3,oneof" json:"premium_tier_0_modal_dismissed_at,omitempty"`
	GuildOnboardingUpsellDismissedAt        *timestamppb.Timestamp                                            `protobuf:"bytes,4,opt,name=guild_onboarding_upsell_dismissed_at,json=guildOnboardingUpsellDismissedAt,proto3,oneof" json:"guild_onboarding_upsell_dismissed_at,omitempty"`
	SafetyUserSentimentNoticeDismissedAt    *timestamppb.Timestamp                                            `protobuf:"bytes,5,opt,name=safety_user_sentiment_notice_dismissed_at,json=safetyUserSentimentNoticeDismissedAt,proto3,oneof" json:"safety_user_sentiment_notice_dismissed_at,omitempty"`
	LastReceivedChangelogId                 uint64                                                            `protobuf:"fixed64,6,opt,name=last_received_changelog_id,json=lastReceivedChangelogId,proto3" json:"last_received_changelog_id,omitempty"`
	RecurringDismissibleContentStates       map[int32]*PreloadedUserSettings_RecurringDismissibleContentState `protobuf:"bytes,7,rep,name=recurring_dismissible_content_states,json=recurringDismissibleContentStates,proto3" json:"recurring_dismissible_content_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PreloadedUserSettings_UserContentSettings) Reset() {
	*x = PreloadedUserSettings_UserContentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_UserContentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_UserContentSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_UserContentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_UserContentSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_UserContentSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 10}
}

func (x *PreloadedUserSettings_UserContentSettings) GetDismissedContents() []byte {
	if x != nil {
		return x.DismissedContents
	}
	return nil
}

func (x *PreloadedUserSettings_UserContentSettings) GetLastDismissedOutboundPromotionStartDate() *wrapperspb.StringValue {
	if x != nil {
		return x.LastDismissedOutboundPromotionStartDate
	}
	return nil
}

func (x *PreloadedUserSettings_UserContentSettings) GetPremiumTier_0ModalDismissedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PremiumTier_0ModalDismissedAt
	}
	return nil
}

func (x *PreloadedUserSettings_UserContentSettings) GetGuildOnboardingUpsellDismissedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GuildOnboardingUpsellDismissedAt
	}
	return nil
}

func (x *PreloadedUserSettings_UserContentSettings) GetSafetyUserSentimentNoticeDismissedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SafetyUserSentimentNoticeDismissedAt
	}
	return nil
}

func (x *PreloadedUserSettings_UserContentSettings) GetLastReceivedChangelogId() uint64 {
	if x != nil {
		return x.LastReceivedChangelogId
	}
	return 0
}

func (x *PreloadedUserSettings_UserContentSettings) GetRecurringDismissibleContentStates() map[int32]*PreloadedUserSettings_RecurringDismissibleContentState {
	if x != nil {
		return x.RecurringDismissibleContentStates
	}
	return nil
}

type PreloadedUserSettings_VideoFilterBackgroundBlur struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseBlur bool `protobuf:"varint,1,opt,name=use_blur,json=useBlur,proto3" json:"use_blur,omitempty"`
}

func (x *PreloadedUserSettings_VideoFilterBackgroundBlur) Reset() {
	*x = PreloadedUserSettings_VideoFilterBackgroundBlur{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_VideoFilterBackgroundBlur) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_VideoFilterBackgroundBlur) ProtoMessage() {}

func (x *PreloadedUserSettings_VideoFilterBackgroundBlur) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_VideoFilterBackgroundBlur.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_VideoFilterBackgroundBlur) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 11}
}

func (x *PreloadedUserSettings_VideoFilterBackgroundBlur) GetUseBlur() bool {
	if x != nil {
		return x.UseBlur
	}
	return false
}

type PreloadedUserSettings_VideoFilterAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetHash string `protobuf:"bytes,2,opt,name=asset_hash,json=assetHash,proto3" json:"asset_hash,omitempty"`
}

func (x *PreloadedUserSettings_VideoFilterAsset) Reset() {
	*x = PreloadedUserSettings_VideoFilterAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_VideoFilterAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_VideoFilterAsset) ProtoMessage() {}

func (x *PreloadedUserSettings_VideoFilterAsset) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_VideoFilterAsset.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_VideoFilterAsset) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 12}
}

func (x *PreloadedUserSettings_VideoFilterAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PreloadedUserSettings_VideoFilterAsset) GetAssetHash() string {
	if x != nil {
		return x.AssetHash
	}
	return ""
}

type PreloadedUserSettings_SoundboardSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume float32 `protobuf:"fixed32,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *PreloadedUserSettings_SoundboardSettings) Reset() {
	*x = PreloadedUserSettings_SoundboardSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_SoundboardSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_SoundboardSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_SoundboardSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_SoundboardSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_SoundboardSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 13}
}

func (x *PreloadedUserSettings_SoundboardSettings) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type PreloadedUserSettings_VoiceAndVideoSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blur                          *PreloadedUserSettings_VideoFilterBackgroundBlur `protobuf:"bytes,1,opt,name=blur,proto3" json:"blur,omitempty"`
	PresetOption                  uint32                                           `protobuf:"varint,2,opt,name=preset_option,json=presetOption,proto3" json:"preset_option,omitempty"`
	CustomAsset                   *PreloadedUserSettings_VideoFilterAsset          `protobuf:"bytes,3,opt,name=custom_asset,json=customAsset,proto3" json:"custom_asset,omitempty"`
	AlwaysPreviewVideo            *wrapperspb.BoolValue                            `protobuf:"bytes,5,opt,name=always_preview_video,json=alwaysPreviewVideo,proto3,oneof" json:"always_preview_video,omitempty"`
	AfkTimeout                    *wrapperspb.UInt32Value                          `protobuf:"bytes,6,opt,name=afk_timeout,json=afkTimeout,proto3,oneof" json:"afk_timeout,omitempty"`
	StreamNotificationsEnabled    *wrapperspb.BoolValue                            `protobuf:"bytes,7,opt,name=stream_notifications_enabled,json=streamNotificationsEnabled,proto3,oneof" json:"stream_notifications_enabled,omitempty"`
	NativePhoneIntegrationEnabled *wrapperspb.BoolValue                            `protobuf:"bytes,8,opt,name=native_phone_integration_enabled,json=nativePhoneIntegrationEnabled,proto3,oneof" json:"native_phone_integration_enabled,omitempty"`
	SoundboardSettings            *PreloadedUserSettings_SoundboardSettings        `protobuf:"bytes,9,opt,name=soundboard_settings,json=soundboardSettings,proto3,oneof" json:"soundboard_settings,omitempty"`
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) Reset() {
	*x = PreloadedUserSettings_VoiceAndVideoSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_VoiceAndVideoSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_VoiceAndVideoSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_VoiceAndVideoSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 14}
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetBlur() *PreloadedUserSettings_VideoFilterBackgroundBlur {
	if x != nil {
		return x.Blur
	}
	return nil
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetPresetOption() uint32 {
	if x != nil {
		return x.PresetOption
	}
	return 0
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetCustomAsset() *PreloadedUserSettings_VideoFilterAsset {
	if x != nil {
		return x.CustomAsset
	}
	return nil
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetAlwaysPreviewVideo() *wrapperspb.BoolValue {
	if x != nil {
		return x.AlwaysPreviewVideo
	}
	return nil
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetAfkTimeout() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AfkTimeout
	}
	return nil
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetStreamNotificationsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.StreamNotificationsEnabled
	}
	return nil
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetNativePhoneIntegrationEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.NativePhoneIntegrationEnabled
	}
	return nil
}

func (x *PreloadedUserSettings_VoiceAndVideoSettings) GetSoundboardSettings() *PreloadedUserSettings_SoundboardSettings {
	if x != nil {
		return x.SoundboardSettings
	}
	return nil
}

type PreloadedUserSettings_ExplicitContentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExplicitContentGuilds      PreloadedUserSettings_ExplicitContentRedaction `protobuf:"varint,1,opt,name=explicit_content_guilds,json=explicitContentGuilds,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_ExplicitContentRedaction" json:"explicit_content_guilds,omitempty"`
	ExplicitContentFriendDm    PreloadedUserSettings_ExplicitContentRedaction `protobuf:"varint,2,opt,name=explicit_content_friend_dm,json=explicitContentFriendDm,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_ExplicitContentRedaction" json:"explicit_content_friend_dm,omitempty"`
	ExplicitContentNonFriendDm PreloadedUserSettings_ExplicitContentRedaction `protobuf:"varint,3,opt,name=explicit_content_non_friend_dm,json=explicitContentNonFriendDm,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_ExplicitContentRedaction" json:"explicit_content_non_friend_dm,omitempty"`
}

func (x *PreloadedUserSettings_ExplicitContentSettings) Reset() {
	*x = PreloadedUserSettings_ExplicitContentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_ExplicitContentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_ExplicitContentSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_ExplicitContentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_ExplicitContentSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_ExplicitContentSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 15}
}

func (x *PreloadedUserSettings_ExplicitContentSettings) GetExplicitContentGuilds() PreloadedUserSettings_ExplicitContentRedaction {
	if x != nil {
		return x.ExplicitContentGuilds
	}
	return PreloadedUserSettings_UNSET_EXPLICIT_CONTENT_REDACTION
}

func (x *PreloadedUserSettings_ExplicitContentSettings) GetExplicitContentFriendDm() PreloadedUserSettings_ExplicitContentRedaction {
	if x != nil {
		return x.ExplicitContentFriendDm
	}
	return PreloadedUserSettings_UNSET_EXPLICIT_CONTENT_REDACTION
}

func (x *PreloadedUserSettings_ExplicitContentSettings) GetExplicitContentNonFriendDm() PreloadedUserSettings_ExplicitContentRedaction {
	if x != nil {
		return x.ExplicitContentNonFriendDm
	}
	return PreloadedUserSettings_UNSET_EXPLICIT_CONTENT_REDACTION
}

type PreloadedUserSettings_KeywordFilterSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profanity     *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=profanity,proto3,oneof" json:"profanity,omitempty"`
	SexualContent *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=sexual_content,json=sexualContent,proto3,oneof" json:"sexual_content,omitempty"`
	Slurs         *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=slurs,proto3,oneof" json:"slurs,omitempty"`
}

func (x *PreloadedUserSettings_KeywordFilterSettings) Reset() {
	*x = PreloadedUserSettings_KeywordFilterSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_KeywordFilterSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_KeywordFilterSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_KeywordFilterSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_KeywordFilterSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_KeywordFilterSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 16}
}

func (x *PreloadedUserSettings_KeywordFilterSettings) GetProfanity() *wrapperspb.BoolValue {
	if x != nil {
		return x.Profanity
	}
	return nil
}

func (x *PreloadedUserSettings_KeywordFilterSettings) GetSexualContent() *wrapperspb.BoolValue {
	if x != nil {
		return x.SexualContent
	}
	return nil
}

func (x *PreloadedUserSettings_KeywordFilterSettings) GetSlurs() *wrapperspb.BoolValue {
	if x != nil {
		return x.Slurs
	}
	return nil
}

type PreloadedUserSettings_TextAndImagesSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiversitySurrogate                *wrapperspb.StringValue                        `protobuf:"bytes,1,opt,name=diversity_surrogate,json=diversitySurrogate,proto3,oneof" json:"diversity_surrogate,omitempty"`
	UseRichChatInput                  *wrapperspb.BoolValue                          `protobuf:"bytes,2,opt,name=use_rich_chat_input,json=useRichChatInput,proto3,oneof" json:"use_rich_chat_input,omitempty"`
	UseThreadSidebar                  *wrapperspb.BoolValue                          `protobuf:"bytes,3,opt,name=use_thread_sidebar,json=useThreadSidebar,proto3,oneof" json:"use_thread_sidebar,omitempty"`
	RenderSpoilers                    *wrapperspb.StringValue                        `protobuf:"bytes,4,opt,name=render_spoilers,json=renderSpoilers,proto3,oneof" json:"render_spoilers,omitempty"`
	EmojiPickerCollapsedSections      []string                                       `protobuf:"bytes,5,rep,name=emoji_picker_collapsed_sections,json=emojiPickerCollapsedSections,proto3" json:"emoji_picker_collapsed_sections,omitempty"`
	StickerPickerCollapsedSections    []string                                       `protobuf:"bytes,6,rep,name=sticker_picker_collapsed_sections,json=stickerPickerCollapsedSections,proto3" json:"sticker_picker_collapsed_sections,omitempty"`
	ViewImageDescriptions             *wrapperspb.BoolValue                          `protobuf:"bytes,7,opt,name=view_image_descriptions,json=viewImageDescriptions,proto3,oneof" json:"view_image_descriptions,omitempty"`
	ShowCommandSuggestions            *wrapperspb.BoolValue                          `protobuf:"bytes,8,opt,name=show_command_suggestions,json=showCommandSuggestions,proto3,oneof" json:"show_command_suggestions,omitempty"`
	InlineAttachmentMedia             *wrapperspb.BoolValue                          `protobuf:"bytes,9,opt,name=inline_attachment_media,json=inlineAttachmentMedia,proto3,oneof" json:"inline_attachment_media,omitempty"`
	InlineEmbedMedia                  *wrapperspb.BoolValue                          `protobuf:"bytes,10,opt,name=inline_embed_media,json=inlineEmbedMedia,proto3,oneof" json:"inline_embed_media,omitempty"`
	GifAutoPlay                       *wrapperspb.BoolValue                          `protobuf:"bytes,11,opt,name=gif_auto_play,json=gifAutoPlay,proto3,oneof" json:"gif_auto_play,omitempty"`
	RenderEmbeds                      *wrapperspb.BoolValue                          `protobuf:"bytes,12,opt,name=render_embeds,json=renderEmbeds,proto3,oneof" json:"render_embeds,omitempty"`
	RenderReactions                   *wrapperspb.BoolValue                          `protobuf:"bytes,13,opt,name=render_reactions,json=renderReactions,proto3,oneof" json:"render_reactions,omitempty"`
	AnimateEmoji                      *wrapperspb.BoolValue                          `protobuf:"bytes,14,opt,name=animate_emoji,json=animateEmoji,proto3,oneof" json:"animate_emoji,omitempty"`
	AnimateStickers                   *wrapperspb.UInt32Value                        `protobuf:"bytes,15,opt,name=animate_stickers,json=animateStickers,proto3,oneof" json:"animate_stickers,omitempty"`
	EnableTtsCommand                  *wrapperspb.BoolValue                          `protobuf:"bytes,16,opt,name=enable_tts_command,json=enableTtsCommand,proto3,oneof" json:"enable_tts_command,omitempty"`
	MessageDisplayCompact             *wrapperspb.BoolValue                          `protobuf:"bytes,17,opt,name=message_display_compact,json=messageDisplayCompact,proto3,oneof" json:"message_display_compact,omitempty"`
	ExplicitContentFilter             *wrapperspb.UInt32Value                        `protobuf:"bytes,19,opt,name=explicit_content_filter,json=explicitContentFilter,proto3,oneof" json:"explicit_content_filter,omitempty"`
	ViewNsfwGuilds                    *wrapperspb.BoolValue                          `protobuf:"bytes,20,opt,name=view_nsfw_guilds,json=viewNsfwGuilds,proto3,oneof" json:"view_nsfw_guilds,omitempty"`
	ConvertEmoticons                  *wrapperspb.BoolValue                          `protobuf:"bytes,21,opt,name=convert_emoticons,json=convertEmoticons,proto3,oneof" json:"convert_emoticons,omitempty"`
	ExpressionSuggestionsEnabled      *wrapperspb.BoolValue                          `protobuf:"bytes,22,opt,name=expression_suggestions_enabled,json=expressionSuggestionsEnabled,proto3,oneof" json:"expression_suggestions_enabled,omitempty"`
	ViewNsfwCommands                  *wrapperspb.BoolValue                          `protobuf:"bytes,23,opt,name=view_nsfw_commands,json=viewNsfwCommands,proto3,oneof" json:"view_nsfw_commands,omitempty"`
	UseLegacyChatInput                *wrapperspb.BoolValue                          `protobuf:"bytes,24,opt,name=use_legacy_chat_input,json=useLegacyChatInput,proto3,oneof" json:"use_legacy_chat_input,omitempty"`
	SoundboardPickerCollapsedSections []string                                       `protobuf:"bytes,25,rep,name=soundboard_picker_collapsed_sections,json=soundboardPickerCollapsedSections,proto3" json:"soundboard_picker_collapsed_sections,omitempty"`
	DmSpamFilter                      *wrapperspb.UInt32Value                        `protobuf:"bytes,26,opt,name=dm_spam_filter,json=dmSpamFilter,proto3,oneof" json:"dm_spam_filter,omitempty"`
	DmSpamFilterV2                    PreloadedUserSettings_DmSpamFilterV2           `protobuf:"varint,27,opt,name=dm_spam_filter_v2,json=dmSpamFilterV2,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_DmSpamFilterV2" json:"dm_spam_filter_v2,omitempty"`
	IncludeStickersInAutocomplete     *wrapperspb.BoolValue                          `protobuf:"bytes,28,opt,name=include_stickers_in_autocomplete,json=includeStickersInAutocomplete,proto3,oneof" json:"include_stickers_in_autocomplete,omitempty"`
	ExplicitContentSettings           *PreloadedUserSettings_ExplicitContentSettings `protobuf:"bytes,29,opt,name=explicit_content_settings,json=explicitContentSettings,proto3,oneof" json:"explicit_content_settings,omitempty"`
	KeywordFilterSettings             *PreloadedUserSettings_KeywordFilterSettings   `protobuf:"bytes,30,opt,name=keyword_filter_settings,json=keywordFilterSettings,proto3,oneof" json:"keyword_filter_settings,omitempty"`
}

func (x *PreloadedUserSettings_TextAndImagesSettings) Reset() {
	*x = PreloadedUserSettings_TextAndImagesSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_TextAndImagesSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_TextAndImagesSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_TextAndImagesSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_TextAndImagesSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_TextAndImagesSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 17}
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetDiversitySurrogate() *wrapperspb.StringValue {
	if x != nil {
		return x.DiversitySurrogate
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetUseRichChatInput() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseRichChatInput
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetUseThreadSidebar() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseThreadSidebar
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetRenderSpoilers() *wrapperspb.StringValue {
	if x != nil {
		return x.RenderSpoilers
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetEmojiPickerCollapsedSections() []string {
	if x != nil {
		return x.EmojiPickerCollapsedSections
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetStickerPickerCollapsedSections() []string {
	if x != nil {
		return x.StickerPickerCollapsedSections
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetViewImageDescriptions() *wrapperspb.BoolValue {
	if x != nil {
		return x.ViewImageDescriptions
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetShowCommandSuggestions() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowCommandSuggestions
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetInlineAttachmentMedia() *wrapperspb.BoolValue {
	if x != nil {
		return x.InlineAttachmentMedia
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetInlineEmbedMedia() *wrapperspb.BoolValue {
	if x != nil {
		return x.InlineEmbedMedia
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetGifAutoPlay() *wrapperspb.BoolValue {
	if x != nil {
		return x.GifAutoPlay
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetRenderEmbeds() *wrapperspb.BoolValue {
	if x != nil {
		return x.RenderEmbeds
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetRenderReactions() *wrapperspb.BoolValue {
	if x != nil {
		return x.RenderReactions
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetAnimateEmoji() *wrapperspb.BoolValue {
	if x != nil {
		return x.AnimateEmoji
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetAnimateStickers() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AnimateStickers
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetEnableTtsCommand() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableTtsCommand
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetMessageDisplayCompact() *wrapperspb.BoolValue {
	if x != nil {
		return x.MessageDisplayCompact
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetExplicitContentFilter() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExplicitContentFilter
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetViewNsfwGuilds() *wrapperspb.BoolValue {
	if x != nil {
		return x.ViewNsfwGuilds
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetConvertEmoticons() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConvertEmoticons
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetExpressionSuggestionsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExpressionSuggestionsEnabled
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetViewNsfwCommands() *wrapperspb.BoolValue {
	if x != nil {
		return x.ViewNsfwCommands
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetUseLegacyChatInput() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseLegacyChatInput
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetSoundboardPickerCollapsedSections() []string {
	if x != nil {
		return x.SoundboardPickerCollapsedSections
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetDmSpamFilter() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DmSpamFilter
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetDmSpamFilterV2() PreloadedUserSettings_DmSpamFilterV2 {
	if x != nil {
		return x.DmSpamFilterV2
	}
	return PreloadedUserSettings_DEFAULT_UNSET
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetIncludeStickersInAutocomplete() *wrapperspb.BoolValue {
	if x != nil {
		return x.IncludeStickersInAutocomplete
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetExplicitContentSettings() *PreloadedUserSettings_ExplicitContentSettings {
	if x != nil {
		return x.ExplicitContentSettings
	}
	return nil
}

func (x *PreloadedUserSettings_TextAndImagesSettings) GetKeywordFilterSettings() *PreloadedUserSettings_KeywordFilterSettings {
	if x != nil {
		return x.KeywordFilterSettings
	}
	return nil
}

type PreloadedUserSettings_NotificationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowInAppNotifications           *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=show_in_app_notifications,json=showInAppNotifications,proto3,oneof" json:"show_in_app_notifications,omitempty"`
	NotifyFriendsOnGoLive            *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=notify_friends_on_go_live,json=notifyFriendsOnGoLive,proto3,oneof" json:"notify_friends_on_go_live,omitempty"`
	NotificationCenterAckedBeforeId  uint64                `protobuf:"fixed64,3,opt,name=notification_center_acked_before_id,json=notificationCenterAckedBeforeId,proto3" json:"notification_center_acked_before_id,omitempty"`
	EnableBurstReactionNotifications *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=enable_burst_reaction_notifications,json=enableBurstReactionNotifications,proto3,oneof" json:"enable_burst_reaction_notifications,omitempty"`
	QuietMode                        *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=quiet_mode,json=quietMode,proto3,oneof" json:"quiet_mode,omitempty"`
	FocusModeExpiresAtMs             uint64                `protobuf:"fixed64,6,opt,name=focus_mode_expires_at_ms,json=focusModeExpiresAtMs,proto3" json:"focus_mode_expires_at_ms,omitempty"`
}

func (x *PreloadedUserSettings_NotificationSettings) Reset() {
	*x = PreloadedUserSettings_NotificationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_NotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_NotificationSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_NotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_NotificationSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_NotificationSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 18}
}

func (x *PreloadedUserSettings_NotificationSettings) GetShowInAppNotifications() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowInAppNotifications
	}
	return nil
}

func (x *PreloadedUserSettings_NotificationSettings) GetNotifyFriendsOnGoLive() *wrapperspb.BoolValue {
	if x != nil {
		return x.NotifyFriendsOnGoLive
	}
	return nil
}

func (x *PreloadedUserSettings_NotificationSettings) GetNotificationCenterAckedBeforeId() uint64 {
	if x != nil {
		return x.NotificationCenterAckedBeforeId
	}
	return 0
}

func (x *PreloadedUserSettings_NotificationSettings) GetEnableBurstReactionNotifications() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableBurstReactionNotifications
	}
	return nil
}

func (x *PreloadedUserSettings_NotificationSettings) GetQuietMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.QuietMode
	}
	return nil
}

func (x *PreloadedUserSettings_NotificationSettings) GetFocusModeExpiresAtMs() uint64 {
	if x != nil {
		return x.FocusModeExpiresAtMs
	}
	return 0
}

type PreloadedUserSettings_PrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowActivityPartyPrivacyFriends      *wrapperspb.BoolValue                                       `protobuf:"bytes,1,opt,name=allow_activity_party_privacy_friends,json=allowActivityPartyPrivacyFriends,proto3,oneof" json:"allow_activity_party_privacy_friends,omitempty"`
	AllowActivityPartyPrivacyVoiceChannel *wrapperspb.BoolValue                                       `protobuf:"bytes,2,opt,name=allow_activity_party_privacy_voice_channel,json=allowActivityPartyPrivacyVoiceChannel,proto3,oneof" json:"allow_activity_party_privacy_voice_channel,omitempty"`
	RestrictedGuildIds                    []uint64                                                    `protobuf:"fixed64,3,rep,packed,name=restricted_guild_ids,json=restrictedGuildIds,proto3" json:"restricted_guild_ids,omitempty"`
	DefaultGuildsRestricted               bool                                                        `protobuf:"varint,4,opt,name=default_guilds_restricted,json=defaultGuildsRestricted,proto3" json:"default_guilds_restricted,omitempty"`
	AllowAccessibilityDetection           bool                                                        `protobuf:"varint,7,opt,name=allow_accessibility_detection,json=allowAccessibilityDetection,proto3" json:"allow_accessibility_detection,omitempty"`
	DetectPlatformAccounts                *wrapperspb.BoolValue                                       `protobuf:"bytes,8,opt,name=detect_platform_accounts,json=detectPlatformAccounts,proto3,oneof" json:"detect_platform_accounts,omitempty"`
	Passwordless                          *wrapperspb.BoolValue                                       `protobuf:"bytes,9,opt,name=passwordless,proto3,oneof" json:"passwordless,omitempty"`
	ContactSyncEnabled                    *wrapperspb.BoolValue                                       `protobuf:"bytes,10,opt,name=contact_sync_enabled,json=contactSyncEnabled,proto3,oneof" json:"contact_sync_enabled,omitempty"`
	FriendSourceFlags                     *wrapperspb.UInt32Value                                     `protobuf:"bytes,11,opt,name=friend_source_flags,json=friendSourceFlags,proto3,oneof" json:"friend_source_flags,omitempty"`
	FriendDiscoveryFlags                  *wrapperspb.UInt32Value                                     `protobuf:"bytes,12,opt,name=friend_discovery_flags,json=friendDiscoveryFlags,proto3,oneof" json:"friend_discovery_flags,omitempty"`
	ActivityRestrictedGuildIds            []uint64                                                    `protobuf:"fixed64,13,rep,packed,name=activity_restricted_guild_ids,json=activityRestrictedGuildIds,proto3" json:"activity_restricted_guild_ids,omitempty"`
	DefaultGuildsActivityRestricted       PreloadedUserSettings_GuildActivityStatusRestrictionDefault `protobuf:"varint,14,opt,name=default_guilds_activity_restricted,json=defaultGuildsActivityRestricted,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_GuildActivityStatusRestrictionDefault" json:"default_guilds_activity_restricted,omitempty"`
	ActivityJoiningRestrictedGuildIds     []uint64                                                    `protobuf:"fixed64,15,rep,packed,name=activity_joining_restricted_guild_ids,json=activityJoiningRestrictedGuildIds,proto3" json:"activity_joining_restricted_guild_ids,omitempty"`
	MessageRequestRestrictedGuildIds      []uint64                                                    `protobuf:"fixed64,16,rep,packed,name=message_request_restricted_guild_ids,json=messageRequestRestrictedGuildIds,proto3" json:"message_request_restricted_guild_ids,omitempty"`
	DefaultMessageRequestRestricted       *wrapperspb.BoolValue                                       `protobuf:"bytes,17,opt,name=default_message_request_restricted,json=defaultMessageRequestRestricted,proto3,oneof" json:"default_message_request_restricted,omitempty"`
	DropsOptedOut                         *wrapperspb.BoolValue                                       `protobuf:"bytes,18,opt,name=drops_opted_out,json=dropsOptedOut,proto3,oneof" json:"drops_opted_out,omitempty"`
	NonSpamRetrainingOptIn                *wrapperspb.BoolValue                                       `protobuf:"bytes,19,opt,name=non_spam_retraining_opt_in,json=nonSpamRetrainingOptIn,proto3,oneof" json:"non_spam_retraining_opt_in,omitempty"`
	FamilyCenterEnabled                   *wrapperspb.BoolValue                                       `protobuf:"bytes,20,opt,name=family_center_enabled,json=familyCenterEnabled,proto3,oneof" json:"family_center_enabled,omitempty"`
	FamilyCenterEnabledV2                 *wrapperspb.BoolValue                                       `protobuf:"bytes,21,opt,name=family_center_enabled_v2,json=familyCenterEnabledV2,proto3,oneof" json:"family_center_enabled_v2,omitempty"`
	HideLegacyUsername                    *wrapperspb.BoolValue                                       `protobuf:"bytes,22,opt,name=hide_legacy_username,json=hideLegacyUsername,proto3,oneof" json:"hide_legacy_username,omitempty"`
	InappropriateConversationWarnings     *wrapperspb.BoolValue                                       `protobuf:"bytes,23,opt,name=inappropriate_conversation_warnings,json=inappropriateConversationWarnings,proto3,oneof" json:"inappropriate_conversation_warnings,omitempty"`
	RecentGamesEnabled                    *wrapperspb.BoolValue                                       `protobuf:"bytes,24,opt,name=recent_games_enabled,json=recentGamesEnabled,proto3,oneof" json:"recent_games_enabled,omitempty"`
}

func (x *PreloadedUserSettings_PrivacySettings) Reset() {
	*x = PreloadedUserSettings_PrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_PrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_PrivacySettings) ProtoMessage() {}

func (x *PreloadedUserSettings_PrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_PrivacySettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_PrivacySettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 19}
}

func (x *PreloadedUserSettings_PrivacySettings) GetAllowActivityPartyPrivacyFriends() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowActivityPartyPrivacyFriends
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetAllowActivityPartyPrivacyVoiceChannel() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowActivityPartyPrivacyVoiceChannel
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetRestrictedGuildIds() []uint64 {
	if x != nil {
		return x.RestrictedGuildIds
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetDefaultGuildsRestricted() bool {
	if x != nil {
		return x.DefaultGuildsRestricted
	}
	return false
}

func (x *PreloadedUserSettings_PrivacySettings) GetAllowAccessibilityDetection() bool {
	if x != nil {
		return x.AllowAccessibilityDetection
	}
	return false
}

func (x *PreloadedUserSettings_PrivacySettings) GetDetectPlatformAccounts() *wrapperspb.BoolValue {
	if x != nil {
		return x.DetectPlatformAccounts
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetPasswordless() *wrapperspb.BoolValue {
	if x != nil {
		return x.Passwordless
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetContactSyncEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ContactSyncEnabled
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetFriendSourceFlags() *wrapperspb.UInt32Value {
	if x != nil {
		return x.FriendSourceFlags
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetFriendDiscoveryFlags() *wrapperspb.UInt32Value {
	if x != nil {
		return x.FriendDiscoveryFlags
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetActivityRestrictedGuildIds() []uint64 {
	if x != nil {
		return x.ActivityRestrictedGuildIds
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetDefaultGuildsActivityRestricted() PreloadedUserSettings_GuildActivityStatusRestrictionDefault {
	if x != nil {
		return x.DefaultGuildsActivityRestricted
	}
	return PreloadedUserSettings_OFF
}

func (x *PreloadedUserSettings_PrivacySettings) GetActivityJoiningRestrictedGuildIds() []uint64 {
	if x != nil {
		return x.ActivityJoiningRestrictedGuildIds
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetMessageRequestRestrictedGuildIds() []uint64 {
	if x != nil {
		return x.MessageRequestRestrictedGuildIds
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetDefaultMessageRequestRestricted() *wrapperspb.BoolValue {
	if x != nil {
		return x.DefaultMessageRequestRestricted
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetDropsOptedOut() *wrapperspb.BoolValue {
	if x != nil {
		return x.DropsOptedOut
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetNonSpamRetrainingOptIn() *wrapperspb.BoolValue {
	if x != nil {
		return x.NonSpamRetrainingOptIn
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetFamilyCenterEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.FamilyCenterEnabled
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetFamilyCenterEnabledV2() *wrapperspb.BoolValue {
	if x != nil {
		return x.FamilyCenterEnabledV2
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetHideLegacyUsername() *wrapperspb.BoolValue {
	if x != nil {
		return x.HideLegacyUsername
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetInappropriateConversationWarnings() *wrapperspb.BoolValue {
	if x != nil {
		return x.InappropriateConversationWarnings
	}
	return nil
}

func (x *PreloadedUserSettings_PrivacySettings) GetRecentGamesEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.RecentGamesEnabled
	}
	return nil
}

type PreloadedUserSettings_DebugSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtcPanelShowVoiceStates *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=rtc_panel_show_voice_states,json=rtcPanelShowVoiceStates,proto3,oneof" json:"rtc_panel_show_voice_states,omitempty"`
}

func (x *PreloadedUserSettings_DebugSettings) Reset() {
	*x = PreloadedUserSettings_DebugSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_DebugSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_DebugSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_DebugSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_DebugSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_DebugSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 20}
}

func (x *PreloadedUserSettings_DebugSettings) GetRtcPanelShowVoiceStates() *wrapperspb.BoolValue {
	if x != nil {
		return x.RtcPanelShowVoiceStates
	}
	return nil
}

type PreloadedUserSettings_GameLibrarySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstallShortcutDesktop   *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=install_shortcut_desktop,json=installShortcutDesktop,proto3,oneof" json:"install_shortcut_desktop,omitempty"`
	InstallShortcutStartMenu *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=install_shortcut_start_menu,json=installShortcutStartMenu,proto3,oneof" json:"install_shortcut_start_menu,omitempty"`
	DisableGamesTab          *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=disable_games_tab,json=disableGamesTab,proto3,oneof" json:"disable_games_tab,omitempty"`
}

func (x *PreloadedUserSettings_GameLibrarySettings) Reset() {
	*x = PreloadedUserSettings_GameLibrarySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_GameLibrarySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_GameLibrarySettings) ProtoMessage() {}

func (x *PreloadedUserSettings_GameLibrarySettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_GameLibrarySettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_GameLibrarySettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 21}
}

func (x *PreloadedUserSettings_GameLibrarySettings) GetInstallShortcutDesktop() *wrapperspb.BoolValue {
	if x != nil {
		return x.InstallShortcutDesktop
	}
	return nil
}

func (x *PreloadedUserSettings_GameLibrarySettings) GetInstallShortcutStartMenu() *wrapperspb.BoolValue {
	if x != nil {
		return x.InstallShortcutStartMenu
	}
	return nil
}

func (x *PreloadedUserSettings_GameLibrarySettings) GetDisableGamesTab() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableGamesTab
	}
	return nil
}

type PreloadedUserSettings_CustomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	EmojiId     uint64 `protobuf:"fixed64,2,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName   string `protobuf:"bytes,3,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
	ExpiresAtMs uint64 `protobuf:"fixed64,4,opt,name=expires_at_ms,json=expiresAtMs,proto3" json:"expires_at_ms,omitempty"`
	CreatedAtMs uint64 `protobuf:"fixed64,5,opt,name=created_at_ms,json=createdAtMs,proto3" json:"created_at_ms,omitempty"`
}

func (x *PreloadedUserSettings_CustomStatus) Reset() {
	*x = PreloadedUserSettings_CustomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_CustomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_CustomStatus) ProtoMessage() {}

func (x *PreloadedUserSettings_CustomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_CustomStatus.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_CustomStatus) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 22}
}

func (x *PreloadedUserSettings_CustomStatus) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PreloadedUserSettings_CustomStatus) GetEmojiId() uint64 {
	if x != nil {
		return x.EmojiId
	}
	return 0
}

func (x *PreloadedUserSettings_CustomStatus) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

func (x *PreloadedUserSettings_CustomStatus) GetExpiresAtMs() uint64 {
	if x != nil {
		return x.ExpiresAtMs
	}
	return 0
}

func (x *PreloadedUserSettings_CustomStatus) GetCreatedAtMs() uint64 {
	if x != nil {
		return x.CreatedAtMs
	}
	return 0
}

type PreloadedUserSettings_StatusSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *wrapperspb.StringValue             `protobuf:"bytes,1,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CustomStatus      *PreloadedUserSettings_CustomStatus `protobuf:"bytes,2,opt,name=custom_status,json=customStatus,proto3,oneof" json:"custom_status,omitempty"`
	ShowCurrentGame   *wrapperspb.BoolValue               `protobuf:"bytes,3,opt,name=show_current_game,json=showCurrentGame,proto3,oneof" json:"show_current_game,omitempty"`
	StatusExpiresAtMs uint64                              `protobuf:"fixed64,4,opt,name=status_expires_at_ms,json=statusExpiresAtMs,proto3" json:"status_expires_at_ms,omitempty"`
}

func (x *PreloadedUserSettings_StatusSettings) Reset() {
	*x = PreloadedUserSettings_StatusSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_StatusSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_StatusSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_StatusSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_StatusSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_StatusSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 23}
}

func (x *PreloadedUserSettings_StatusSettings) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PreloadedUserSettings_StatusSettings) GetCustomStatus() *PreloadedUserSettings_CustomStatus {
	if x != nil {
		return x.CustomStatus
	}
	return nil
}

func (x *PreloadedUserSettings_StatusSettings) GetShowCurrentGame() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowCurrentGame
	}
	return nil
}

func (x *PreloadedUserSettings_StatusSettings) GetStatusExpiresAtMs() uint64 {
	if x != nil {
		return x.StatusExpiresAtMs
	}
	return 0
}

type PreloadedUserSettings_LocalizationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=locale,proto3,oneof" json:"locale,omitempty"`
	TimezoneOffset *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=timezone_offset,json=timezoneOffset,proto3,oneof" json:"timezone_offset,omitempty"`
}

func (x *PreloadedUserSettings_LocalizationSettings) Reset() {
	*x = PreloadedUserSettings_LocalizationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_LocalizationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_LocalizationSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_LocalizationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_LocalizationSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_LocalizationSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 24}
}

func (x *PreloadedUserSettings_LocalizationSettings) GetLocale() *wrapperspb.StringValue {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *PreloadedUserSettings_LocalizationSettings) GetTimezoneOffset() *wrapperspb.Int32Value {
	if x != nil {
		return x.TimezoneOffset
	}
	return nil
}

type PreloadedUserSettings_ClientThemeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundGradientPresetId *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=background_gradient_preset_id,json=backgroundGradientPresetId,proto3,oneof" json:"background_gradient_preset_id,omitempty"`
}

func (x *PreloadedUserSettings_ClientThemeSettings) Reset() {
	*x = PreloadedUserSettings_ClientThemeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_ClientThemeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_ClientThemeSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_ClientThemeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_ClientThemeSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_ClientThemeSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 25}
}

func (x *PreloadedUserSettings_ClientThemeSettings) GetBackgroundGradientPresetId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BackgroundGradientPresetId
	}
	return nil
}

type PreloadedUserSettings_AppearanceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theme                         PreloadedUserSettings_Theme                `protobuf:"varint,1,opt,name=theme,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_Theme" json:"theme,omitempty"`
	DeveloperMode                 bool                                       `protobuf:"varint,2,opt,name=developer_mode,json=developerMode,proto3" json:"developer_mode,omitempty"`
	ClientThemeSettings           *PreloadedUserSettings_ClientThemeSettings `protobuf:"bytes,3,opt,name=client_theme_settings,json=clientThemeSettings,proto3,oneof" json:"client_theme_settings,omitempty"`
	MobileRedesignDisabled        bool                                       `protobuf:"varint,4,opt,name=mobile_redesign_disabled,json=mobileRedesignDisabled,proto3" json:"mobile_redesign_disabled,omitempty"`
	ChannelListLayout             *wrapperspb.StringValue                    `protobuf:"bytes,6,opt,name=channel_list_layout,json=channelListLayout,proto3,oneof" json:"channel_list_layout,omitempty"`
	MessagePreviews               *wrapperspb.StringValue                    `protobuf:"bytes,7,opt,name=message_previews,json=messagePreviews,proto3,oneof" json:"message_previews,omitempty"`
	SearchResultExactCountEnabled *wrapperspb.BoolValue                      `protobuf:"bytes,8,opt,name=search_result_exact_count_enabled,json=searchResultExactCountEnabled,proto3,oneof" json:"search_result_exact_count_enabled,omitempty"`
}

func (x *PreloadedUserSettings_AppearanceSettings) Reset() {
	*x = PreloadedUserSettings_AppearanceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_AppearanceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_AppearanceSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_AppearanceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_AppearanceSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_AppearanceSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 26}
}

func (x *PreloadedUserSettings_AppearanceSettings) GetTheme() PreloadedUserSettings_Theme {
	if x != nil {
		return x.Theme
	}
	return PreloadedUserSettings_UNSET
}

func (x *PreloadedUserSettings_AppearanceSettings) GetDeveloperMode() bool {
	if x != nil {
		return x.DeveloperMode
	}
	return false
}

func (x *PreloadedUserSettings_AppearanceSettings) GetClientThemeSettings() *PreloadedUserSettings_ClientThemeSettings {
	if x != nil {
		return x.ClientThemeSettings
	}
	return nil
}

func (x *PreloadedUserSettings_AppearanceSettings) GetMobileRedesignDisabled() bool {
	if x != nil {
		return x.MobileRedesignDisabled
	}
	return false
}

func (x *PreloadedUserSettings_AppearanceSettings) GetChannelListLayout() *wrapperspb.StringValue {
	if x != nil {
		return x.ChannelListLayout
	}
	return nil
}

func (x *PreloadedUserSettings_AppearanceSettings) GetMessagePreviews() *wrapperspb.StringValue {
	if x != nil {
		return x.MessagePreviews
	}
	return nil
}

func (x *PreloadedUserSettings_AppearanceSettings) GetSearchResultExactCountEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.SearchResultExactCountEnabled
	}
	return nil
}

type PreloadedUserSettings_GuildFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildIds []uint64                `protobuf:"fixed64,1,rep,packed,name=guild_ids,json=guildIds,proto3" json:"guild_ids,omitempty"`
	Id       *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Color    *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=color,proto3,oneof" json:"color,omitempty"`
}

func (x *PreloadedUserSettings_GuildFolder) Reset() {
	*x = PreloadedUserSettings_GuildFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_GuildFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_GuildFolder) ProtoMessage() {}

func (x *PreloadedUserSettings_GuildFolder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_GuildFolder.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_GuildFolder) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 27}
}

func (x *PreloadedUserSettings_GuildFolder) GetGuildIds() []uint64 {
	if x != nil {
		return x.GuildIds
	}
	return nil
}

func (x *PreloadedUserSettings_GuildFolder) GetId() *wrapperspb.Int64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PreloadedUserSettings_GuildFolder) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PreloadedUserSettings_GuildFolder) GetColor() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type PreloadedUserSettings_GuildFolders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folders        []*PreloadedUserSettings_GuildFolder `protobuf:"bytes,1,rep,name=folders,proto3" json:"folders,omitempty"`
	GuildPositions []uint64                             `protobuf:"fixed64,2,rep,packed,name=guild_positions,json=guildPositions,proto3" json:"guild_positions,omitempty"`
}

func (x *PreloadedUserSettings_GuildFolders) Reset() {
	*x = PreloadedUserSettings_GuildFolders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_GuildFolders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_GuildFolders) ProtoMessage() {}

func (x *PreloadedUserSettings_GuildFolders) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_GuildFolders.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_GuildFolders) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 28}
}

func (x *PreloadedUserSettings_GuildFolders) GetFolders() []*PreloadedUserSettings_GuildFolder {
	if x != nil {
		return x.Folders
	}
	return nil
}

func (x *PreloadedUserSettings_GuildFolders) GetGuildPositions() []uint64 {
	if x != nil {
		return x.GuildPositions
	}
	return nil
}

type PreloadedUserSettings_FavoriteChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string                                    `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Type     PreloadedUserSettings_FavoriteChannelType `protobuf:"varint,2,opt,name=type,proto3,enum=discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings_FavoriteChannelType" json:"type,omitempty"`
	Position uint32                                    `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	ParentId uint64                                    `protobuf:"fixed64,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *PreloadedUserSettings_FavoriteChannel) Reset() {
	*x = PreloadedUserSettings_FavoriteChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_FavoriteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_FavoriteChannel) ProtoMessage() {}

func (x *PreloadedUserSettings_FavoriteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_FavoriteChannel.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_FavoriteChannel) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 29}
}

func (x *PreloadedUserSettings_FavoriteChannel) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PreloadedUserSettings_FavoriteChannel) GetType() PreloadedUserSettings_FavoriteChannelType {
	if x != nil {
		return x.Type
	}
	return PreloadedUserSettings_UNSET_FAVORITE_CHANNEL_TYPE
}

func (x *PreloadedUserSettings_FavoriteChannel) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PreloadedUserSettings_FavoriteChannel) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type PreloadedUserSettings_Favorites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteChannels map[uint64]*PreloadedUserSettings_FavoriteChannel `protobuf:"bytes,1,rep,name=favorite_channels,json=favoriteChannels,proto3" json:"favorite_channels,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Muted            bool                                              `protobuf:"varint,2,opt,name=muted,proto3" json:"muted,omitempty"`
}

func (x *PreloadedUserSettings_Favorites) Reset() {
	*x = PreloadedUserSettings_Favorites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_Favorites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_Favorites) ProtoMessage() {}

func (x *PreloadedUserSettings_Favorites) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_Favorites.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_Favorites) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 30}
}

func (x *PreloadedUserSettings_Favorites) GetFavoriteChannels() map[uint64]*PreloadedUserSettings_FavoriteChannel {
	if x != nil {
		return x.FavoriteChannels
	}
	return nil
}

func (x *PreloadedUserSettings_Favorites) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

type PreloadedUserSettings_AudioContextSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Muted           bool    `protobuf:"varint,1,opt,name=muted,proto3" json:"muted,omitempty"`
	Volume          float32 `protobuf:"fixed32,2,opt,name=volume,proto3" json:"volume,omitempty"`
	ModifiedAt      uint64  `protobuf:"fixed64,3,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	SoundboardMuted bool    `protobuf:"varint,4,opt,name=soundboard_muted,json=soundboardMuted,proto3" json:"soundboard_muted,omitempty"`
}

func (x *PreloadedUserSettings_AudioContextSetting) Reset() {
	*x = PreloadedUserSettings_AudioContextSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_AudioContextSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_AudioContextSetting) ProtoMessage() {}

func (x *PreloadedUserSettings_AudioContextSetting) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_AudioContextSetting.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_AudioContextSetting) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 31}
}

func (x *PreloadedUserSettings_AudioContextSetting) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *PreloadedUserSettings_AudioContextSetting) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PreloadedUserSettings_AudioContextSetting) GetModifiedAt() uint64 {
	if x != nil {
		return x.ModifiedAt
	}
	return 0
}

func (x *PreloadedUserSettings_AudioContextSetting) GetSoundboardMuted() bool {
	if x != nil {
		return x.SoundboardMuted
	}
	return false
}

type PreloadedUserSettings_AudioSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   map[uint64]*PreloadedUserSettings_AudioContextSetting `protobuf:"bytes,1,rep,name=user,proto3" json:"user,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Stream map[uint64]*PreloadedUserSettings_AudioContextSetting `protobuf:"bytes,2,rep,name=stream,proto3" json:"stream,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PreloadedUserSettings_AudioSettings) Reset() {
	*x = PreloadedUserSettings_AudioSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_AudioSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_AudioSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_AudioSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_AudioSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_AudioSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 32}
}

func (x *PreloadedUserSettings_AudioSettings) GetUser() map[uint64]*PreloadedUserSettings_AudioContextSetting {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PreloadedUserSettings_AudioSettings) GetStream() map[uint64]*PreloadedUserSettings_AudioContextSetting {
	if x != nil {
		return x.Stream
	}
	return nil
}

type PreloadedUserSettings_CommunitiesSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableHomeAutoNav *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=disable_home_auto_nav,json=disableHomeAutoNav,proto3,oneof" json:"disable_home_auto_nav,omitempty"`
}

func (x *PreloadedUserSettings_CommunitiesSettings) Reset() {
	*x = PreloadedUserSettings_CommunitiesSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_CommunitiesSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_CommunitiesSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_CommunitiesSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_CommunitiesSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_CommunitiesSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 33}
}

func (x *PreloadedUserSettings_CommunitiesSettings) GetDisableHomeAutoNav() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableHomeAutoNav
	}
	return nil
}

type PreloadedUserSettings_BroadcastSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFriends    *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=allow_friends,json=allowFriends,proto3,oneof" json:"allow_friends,omitempty"`
	AllowedGuildIds []uint64              `protobuf:"fixed64,2,rep,packed,name=allowed_guild_ids,json=allowedGuildIds,proto3" json:"allowed_guild_ids,omitempty"`
	AllowedUserIds  []uint64              `protobuf:"fixed64,3,rep,packed,name=allowed_user_ids,json=allowedUserIds,proto3" json:"allowed_user_ids,omitempty"`
	AutoBroadcast   *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=auto_broadcast,json=autoBroadcast,proto3,oneof" json:"auto_broadcast,omitempty"`
}

func (x *PreloadedUserSettings_BroadcastSettings) Reset() {
	*x = PreloadedUserSettings_BroadcastSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_BroadcastSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_BroadcastSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_BroadcastSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_BroadcastSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_BroadcastSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 34}
}

func (x *PreloadedUserSettings_BroadcastSettings) GetAllowFriends() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowFriends
	}
	return nil
}

func (x *PreloadedUserSettings_BroadcastSettings) GetAllowedGuildIds() []uint64 {
	if x != nil {
		return x.AllowedGuildIds
	}
	return nil
}

func (x *PreloadedUserSettings_BroadcastSettings) GetAllowedUserIds() []uint64 {
	if x != nil {
		return x.AllowedUserIds
	}
	return nil
}

func (x *PreloadedUserSettings_BroadcastSettings) GetAutoBroadcast() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoBroadcast
	}
	return nil
}

type PreloadedUserSettings_ClipsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowVoiceRecording *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=allow_voice_recording,json=allowVoiceRecording,proto3,oneof" json:"allow_voice_recording,omitempty"`
}

func (x *PreloadedUserSettings_ClipsSettings) Reset() {
	*x = PreloadedUserSettings_ClipsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_PreloadedUserSettings_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadedUserSettings_ClipsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadedUserSettings_ClipsSettings) ProtoMessage() {}

func (x *PreloadedUserSettings_ClipsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_PreloadedUserSettings_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadedUserSettings_ClipsSettings.ProtoReflect.Descriptor instead.
func (*PreloadedUserSettings_ClipsSettings) Descriptor() ([]byte, []int) {
	return file_protos_PreloadedUserSettings_proto_rawDescGZIP(), []int{0, 35}
}

func (x *PreloadedUserSettings_ClipsSettings) GetAllowVoiceRecording() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowVoiceRecording
	}
	return nil
}

var File_protos_PreloadedUserSettings_proto protoreflect.FileDescriptor

var file_protos_PreloadedUserSettings_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x9e, 0x01,
	0x0a, 0x15, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x76, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x75, 0x0a, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x01, 0x52, 0x05, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x88, 0x01, 0x01, 0x12, 0x7a, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x02, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x03, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x8f, 0x01,
	0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x04, 0x52, 0x0d, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x8f, 0x01, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x05, 0x52,
	0x0d, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x06, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x7b, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5c, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x07, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x09, 0x52,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x78, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x0a, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x48, 0x0b, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x0c, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x83, 0x01,
	0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x48, 0x0d, 0x52, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x48, 0x0e,
	0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x95,
	0x01, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x0f, 0x52, 0x14, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x10,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x81, 0x01, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x48, 0x11, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x12, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x7b, 0x0a, 0x08, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xb0, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x76, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x55, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x54, 0x61, 0x62, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x62, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0xcf, 0x01, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x9e, 0x01,
	0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5e, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x1d, 0x0a, 0x1b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x1a, 0xb2,
	0x03, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x12, 0x81, 0x01, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x48, 0x00, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x88, 0x01, 0x01, 0x12, 0xb8, 0x01, 0x0a, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x1d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x42, 0x23,
	0x0a, 0x21, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x47, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0xbe, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x1a, 0x88, 0x0a,
	0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x68, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x75, 0x62, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x75,
	0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x1a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x17, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x0a,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5c, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x01,
	0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0xb7,
	0x01, 0x0a, 0x25, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x48, 0x02, 0x52, 0x21, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x61, 0x69, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12,
	0x33, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x69, 0x64, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4e, 0x61, 0x67, 0x12, 0xb8, 0x01, 0x0a, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x03, 0x52, 0x1d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x1a,
	0x99, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x72, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xae, 0x02, 0x0a, 0x10, 0x41, 0x6c, 0x6c,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x6c, 0x6c,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x1a, 0x95, 0x01, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x70, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x20, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0xaa, 0x09, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x2c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x27, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a,
	0x21, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x30, 0x5f,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54,
	0x69, 0x65, 0x72, 0x30, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x24, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x02, 0x52, 0x20, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x78, 0x0a, 0x29, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x24, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12,
	0xd9, 0x01, 0x0a, 0x24, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x87,
	0x01, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x21, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x26,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x2f, 0x0a, 0x2d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x5f, 0x30, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x70, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x2c, 0x0a, 0x2a, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x1a, 0x36, 0x0a, 0x19, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x1a, 0x41, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x2c, 0x0a, 0x12, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x1a, 0xbe, 0x07, 0x0a, 0x15, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x7a, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x66, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x72, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x66,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52,
	0x0a, 0x61, 0x66, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61,
	0x0a, 0x1c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x02, 0x52, 0x1a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x68, 0x0a, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x1d, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x13,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x04, 0x52, 0x12, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x66, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x23, 0x0a,
	0x21, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x8a, 0x04, 0x0a, 0x17, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x15, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x6d, 0x12, 0xa9, 0x01, 0x0a, 0x1e,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x6d, 0x1a, 0x80, 0x02, 0x0a, 0x15, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x0e, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x6c, 0x75, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x05, 0x73, 0x6c, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6c, 0x75, 0x72, 0x73, 0x1a, 0x93, 0x19, 0x0a, 0x15, 0x54,
	0x65, 0x78, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x53, 0x75, 0x72, 0x72,
	0x6f, 0x67, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f,
	0x72, 0x69, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x52, 0x69, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x02, 0x52, 0x10, 0x75, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x04, 0x52, 0x15, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59,
	0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x05, 0x52, 0x16,
	0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x06, 0x52, 0x15, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x12, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07, 0x52, 0x10, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x08, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x41, 0x75, 0x74, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x10,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x0a, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0b, 0x52, 0x0c, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x88, 0x01, 0x01, 0x12, 0x4c,
	0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0c, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x0d, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x74,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x17, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0e, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x0f, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x10, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x73, 0x66,
	0x77, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x11, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x1e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x12, 0x52, 0x1c,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x13, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x73, 0x66, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x52,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x14, 0x52, 0x12, 0x75, 0x73, 0x65,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x21, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x15, 0x52, 0x0c, 0x64, 0x6d, 0x53,
	0x70, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a,
	0x11, 0x64, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x6d, 0x53, 0x70, 0x61, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x56, 0x32, 0x52, 0x0e, 0x64, 0x6d, 0x53, 0x70, 0x61, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x56, 0x32, 0x12, 0x68, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x16, 0x52, 0x1d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0xa5, 0x01, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x17, 0x52, 0x17, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x9f, 0x01, 0x0a, 0x17, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x18, 0x52,
	0x15, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x67, 0x61, 0x74,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x6f, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x69, 0x66, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x64, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0xf6, 0x04, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77,
	0x49, 0x6e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x47, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4c, 0x0a, 0x23, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x1f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x6e,
	0x0a, 0x23, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0a, 0x71, 0x75, 0x69, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03,
	0x52, 0x09, 0x71, 0x75, 0x69, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x18, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x4d, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x71,
	0x75, 0x69, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x8d, 0x13, 0x0a, 0x0f, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6f, 0x0a,
	0x24, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x7a,
	0x0a, 0x2a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x25, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x18,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x16, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x05, 0x52, 0x11, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x57, 0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x06, 0x52, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0xbf,
	0x01, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x50, 0x0a, 0x25, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x06, 0x52,
	0x21, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x06,
	0x52, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x6c, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07, 0x52, 0x1f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x08, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x4f, 0x70,
	0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x1a, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x09, 0x52, 0x16, 0x6e, 0x6f, 0x6e,
	0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x15, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x0a, 0x52, 0x13, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x18, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0b, 0x52, 0x15, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x56, 0x32, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x14, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x0c, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x23, 0x69, 0x6e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x0d, 0x52, 0x21, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x0e, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x27, 0x0a, 0x25,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x25,
	0x0a, 0x23, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x32, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x69, 0x6e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x1b, 0x72,
	0x74, 0x63, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x72, 0x74, 0x63, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x72,
	0x74, 0x63, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xf0, 0x02, 0x0a, 0x13, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x59, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a,
	0x1b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74,
	0x61, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x1a, 0xa4, 0x01,
	0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x4d, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x4d, 0x73, 0x1a, 0x82, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x02, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x4d, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x1a, 0xbb, 0x01, 0x0a, 0x14, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x9d, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x64, 0x0a, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x1a, 0xf4, 0x05, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x68,
	0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x99, 0x01, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x60, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x18, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x02, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x21, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52,
	0x1d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xe6,
	0x01, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xab, 0x01, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x1a, 0xe1, 0x02, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6c,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x1a, 0xa1, 0x01, 0x0a, 0x15, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x72, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8f, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x1a, 0xc3, 0x04, 0x0a, 0x0d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x78, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x99, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x76, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x9b, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x76, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x61,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f,
	0x6d, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x61, 0x76, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x76, 0x1a, 0x9c, 0x02, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x6f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x7e, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6f, 0x0a, 0x08, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x61,
	0x62, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x4f, 0x44, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x5f,
	0x59, 0x4f, 0x55, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x4b, 0x4d,
	0x41, 0x52, 0x4b, 0x53, 0x10, 0x06, 0x22, 0x5f, 0x0a, 0x0e, 0x44, 0x6d, 0x53, 0x70, 0x61, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x22, 0x5f, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x44, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x22, 0x49, 0x0a, 0x25, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x4e,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x53, 0x10, 0x01, 0x22, 0x41, 0x0a, 0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x52, 0x4b, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x44, 0x4e,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x22, 0x5c, 0x0a, 0x13, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x10, 0x02, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_PreloadedUserSettings_proto_rawDescOnce sync.Once
	file_protos_PreloadedUserSettings_proto_rawDescData = file_protos_PreloadedUserSettings_proto_rawDesc
)

func file_protos_PreloadedUserSettings_proto_rawDescGZIP() []byte {
	file_protos_PreloadedUserSettings_proto_rawDescOnce.Do(func() {
		file_protos_PreloadedUserSettings_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_PreloadedUserSettings_proto_rawDescData)
	})
	return file_protos_PreloadedUserSettings_proto_rawDescData
}

var file_protos_PreloadedUserSettings_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_protos_PreloadedUserSettings_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_protos_PreloadedUserSettings_proto_goTypes = []any{
	(PreloadedUserSettings_InboxTab)(0),                              // 0: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.InboxTab
	(PreloadedUserSettings_DmSpamFilterV2)(0),                        // 1: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.DmSpamFilterV2
	(PreloadedUserSettings_ExplicitContentRedaction)(0),              // 2: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentRedaction
	(PreloadedUserSettings_GuildActivityStatusRestrictionDefault)(0), // 3: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildActivityStatusRestrictionDefault
	(PreloadedUserSettings_Theme)(0),                                 // 4: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Theme
	(PreloadedUserSettings_FavoriteChannelType)(0),                   // 5: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.FavoriteChannelType
	(*PreloadedUserSettings)(nil),                                    // 6: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings
	(*PreloadedUserSettings_Versions)(nil),                           // 7: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Versions
	(*PreloadedUserSettings_InboxSettings)(nil),                      // 8: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.InboxSettings
	(*PreloadedUserSettings_ChannelIconEmoji)(nil),                   // 9: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelIconEmoji
	(*PreloadedUserSettings_CustomNotificationSoundConfig)(nil),      // 10: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomNotificationSoundConfig
	(*PreloadedUserSettings_ChannelSettings)(nil),                    // 11: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelSettings
	(*PreloadedUserSettings_CustomCallSound)(nil),                    // 12: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomCallSound
	(*PreloadedUserSettings_ChannelListSettings)(nil),                // 13: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelListSettings
	(*PreloadedUserSettings_GuildSettings)(nil),                      // 14: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings
	(*PreloadedUserSettings_AllGuildSettings)(nil),                   // 15: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AllGuildSettings
	(*PreloadedUserSettings_RecurringDismissibleContentState)(nil),   // 16: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.RecurringDismissibleContentState
	(*PreloadedUserSettings_UserContentSettings)(nil),                // 17: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings
	(*PreloadedUserSettings_VideoFilterBackgroundBlur)(nil),          // 18: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VideoFilterBackgroundBlur
	(*PreloadedUserSettings_VideoFilterAsset)(nil),                   // 19: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VideoFilterAsset
	(*PreloadedUserSettings_SoundboardSettings)(nil),                 // 20: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.SoundboardSettings
	(*PreloadedUserSettings_VoiceAndVideoSettings)(nil),              // 21: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings
	(*PreloadedUserSettings_ExplicitContentSettings)(nil),            // 22: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentSettings
	(*PreloadedUserSettings_KeywordFilterSettings)(nil),              // 23: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.KeywordFilterSettings
	(*PreloadedUserSettings_TextAndImagesSettings)(nil),              // 24: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings
	(*PreloadedUserSettings_NotificationSettings)(nil),               // 25: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.NotificationSettings
	(*PreloadedUserSettings_PrivacySettings)(nil),                    // 26: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings
	(*PreloadedUserSettings_DebugSettings)(nil),                      // 27: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.DebugSettings
	(*PreloadedUserSettings_GameLibrarySettings)(nil),                // 28: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GameLibrarySettings
	(*PreloadedUserSettings_CustomStatus)(nil),                       // 29: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomStatus
	(*PreloadedUserSettings_StatusSettings)(nil),                     // 30: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.StatusSettings
	(*PreloadedUserSettings_LocalizationSettings)(nil),               // 31: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.LocalizationSettings
	(*PreloadedUserSettings_ClientThemeSettings)(nil),                // 32: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ClientThemeSettings
	(*PreloadedUserSettings_AppearanceSettings)(nil),                 // 33: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AppearanceSettings
	(*PreloadedUserSettings_GuildFolder)(nil),                        // 34: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolder
	(*PreloadedUserSettings_GuildFolders)(nil),                       // 35: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolders
	(*PreloadedUserSettings_FavoriteChannel)(nil),                    // 36: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.FavoriteChannel
	(*PreloadedUserSettings_Favorites)(nil),                          // 37: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Favorites
	(*PreloadedUserSettings_AudioContextSetting)(nil),                // 38: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioContextSetting
	(*PreloadedUserSettings_AudioSettings)(nil),                      // 39: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings
	(*PreloadedUserSettings_CommunitiesSettings)(nil),                // 40: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CommunitiesSettings
	(*PreloadedUserSettings_BroadcastSettings)(nil),                  // 41: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.BroadcastSettings
	(*PreloadedUserSettings_ClipsSettings)(nil),                      // 42: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ClipsSettings
	nil,                            // 43: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.ChannelsEntry
	nil,                            // 44: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AllGuildSettings.GuildsEntry
	nil,                            // 45: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.RecurringDismissibleContentStatesEntry
	nil,                            // 46: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Favorites.FavoriteChannelsEntry
	nil,                            // 47: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.UserEntry
	nil,                            // 48: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.StreamEntry
	(*wrapperspb.UInt64Value)(nil), // 49: google.protobuf.UInt64Value
	(*wrapperspb.StringValue)(nil), // 50: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 51: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),   // 52: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil), // 53: google.protobuf.UInt32Value
	(*wrapperspb.Int32Value)(nil),  // 54: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 55: google.protobuf.Int64Value
}
var file_protos_PreloadedUserSettings_proto_depIdxs = []int32{
	7,   // 0: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.versions:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Versions
	8,   // 1: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.inbox:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.InboxSettings
	15,  // 2: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.guilds:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AllGuildSettings
	17,  // 3: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.user_content:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings
	21,  // 4: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.voice_and_video:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings
	24,  // 5: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.text_and_images:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings
	25,  // 6: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.notifications:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.NotificationSettings
	26,  // 7: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.privacy:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings
	27,  // 8: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.debug:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.DebugSettings
	28,  // 9: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.game_library:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GameLibrarySettings
	30,  // 10: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.status:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.StatusSettings
	31,  // 11: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.localization:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.LocalizationSettings
	33,  // 12: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.appearance:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AppearanceSettings
	35,  // 13: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.guild_folders:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolders
	37,  // 14: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.favorites:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Favorites
	39,  // 15: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.audio_context_settings:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings
	40,  // 16: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.communities:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CommunitiesSettings
	41,  // 17: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.broadcast:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.BroadcastSettings
	42,  // 18: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.clips:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ClipsSettings
	0,   // 19: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.InboxSettings.current_tab:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.InboxTab
	49,  // 20: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelIconEmoji.id:type_name -> google.protobuf.UInt64Value
	50,  // 21: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelIconEmoji.name:type_name -> google.protobuf.StringValue
	49,  // 22: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelIconEmoji.color:type_name -> google.protobuf.UInt64Value
	50,  // 23: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomNotificationSoundConfig.notification_sound_pack_id:type_name -> google.protobuf.StringValue
	9,   // 24: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelSettings.icon_emoji:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelIconEmoji
	10,  // 25: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelSettings.custom_notification_sound_config:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomNotificationSoundConfig
	50,  // 26: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelListSettings.layout:type_name -> google.protobuf.StringValue
	50,  // 27: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelListSettings.message_previews:type_name -> google.protobuf.StringValue
	43,  // 28: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.channels:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.ChannelsEntry
	51,  // 29: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.guild_recents_dismissed_at:type_name -> google.protobuf.Timestamp
	12,  // 30: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.join_sound:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomCallSound
	13,  // 31: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.mobile_redesign_channel_list_settings:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelListSettings
	10,  // 32: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.custom_notification_sound_config:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomNotificationSoundConfig
	44,  // 33: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AllGuildSettings.guilds:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AllGuildSettings.GuildsEntry
	50,  // 34: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.last_dismissed_outbound_promotion_start_date:type_name -> google.protobuf.StringValue
	51,  // 35: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.premium_tier_0_modal_dismissed_at:type_name -> google.protobuf.Timestamp
	51,  // 36: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.guild_onboarding_upsell_dismissed_at:type_name -> google.protobuf.Timestamp
	51,  // 37: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.safety_user_sentiment_notice_dismissed_at:type_name -> google.protobuf.Timestamp
	45,  // 38: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.recurring_dismissible_content_states:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.RecurringDismissibleContentStatesEntry
	18,  // 39: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings.blur:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VideoFilterBackgroundBlur
	19,  // 40: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings.custom_asset:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VideoFilterAsset
	52,  // 41: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings.always_preview_video:type_name -> google.protobuf.BoolValue
	53,  // 42: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings.afk_timeout:type_name -> google.protobuf.UInt32Value
	52,  // 43: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings.stream_notifications_enabled:type_name -> google.protobuf.BoolValue
	52,  // 44: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings.native_phone_integration_enabled:type_name -> google.protobuf.BoolValue
	20,  // 45: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.VoiceAndVideoSettings.soundboard_settings:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.SoundboardSettings
	2,   // 46: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentSettings.explicit_content_guilds:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentRedaction
	2,   // 47: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentSettings.explicit_content_friend_dm:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentRedaction
	2,   // 48: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentSettings.explicit_content_non_friend_dm:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentRedaction
	52,  // 49: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.KeywordFilterSettings.profanity:type_name -> google.protobuf.BoolValue
	52,  // 50: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.KeywordFilterSettings.sexual_content:type_name -> google.protobuf.BoolValue
	52,  // 51: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.KeywordFilterSettings.slurs:type_name -> google.protobuf.BoolValue
	50,  // 52: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.diversity_surrogate:type_name -> google.protobuf.StringValue
	52,  // 53: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.use_rich_chat_input:type_name -> google.protobuf.BoolValue
	52,  // 54: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.use_thread_sidebar:type_name -> google.protobuf.BoolValue
	50,  // 55: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.render_spoilers:type_name -> google.protobuf.StringValue
	52,  // 56: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.view_image_descriptions:type_name -> google.protobuf.BoolValue
	52,  // 57: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.show_command_suggestions:type_name -> google.protobuf.BoolValue
	52,  // 58: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.inline_attachment_media:type_name -> google.protobuf.BoolValue
	52,  // 59: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.inline_embed_media:type_name -> google.protobuf.BoolValue
	52,  // 60: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.gif_auto_play:type_name -> google.protobuf.BoolValue
	52,  // 61: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.render_embeds:type_name -> google.protobuf.BoolValue
	52,  // 62: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.render_reactions:type_name -> google.protobuf.BoolValue
	52,  // 63: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.animate_emoji:type_name -> google.protobuf.BoolValue
	53,  // 64: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.animate_stickers:type_name -> google.protobuf.UInt32Value
	52,  // 65: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.enable_tts_command:type_name -> google.protobuf.BoolValue
	52,  // 66: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.message_display_compact:type_name -> google.protobuf.BoolValue
	53,  // 67: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.explicit_content_filter:type_name -> google.protobuf.UInt32Value
	52,  // 68: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.view_nsfw_guilds:type_name -> google.protobuf.BoolValue
	52,  // 69: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.convert_emoticons:type_name -> google.protobuf.BoolValue
	52,  // 70: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.expression_suggestions_enabled:type_name -> google.protobuf.BoolValue
	52,  // 71: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.view_nsfw_commands:type_name -> google.protobuf.BoolValue
	52,  // 72: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.use_legacy_chat_input:type_name -> google.protobuf.BoolValue
	53,  // 73: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.dm_spam_filter:type_name -> google.protobuf.UInt32Value
	1,   // 74: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.dm_spam_filter_v2:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.DmSpamFilterV2
	52,  // 75: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.include_stickers_in_autocomplete:type_name -> google.protobuf.BoolValue
	22,  // 76: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.explicit_content_settings:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ExplicitContentSettings
	23,  // 77: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.TextAndImagesSettings.keyword_filter_settings:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.KeywordFilterSettings
	52,  // 78: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.NotificationSettings.show_in_app_notifications:type_name -> google.protobuf.BoolValue
	52,  // 79: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.NotificationSettings.notify_friends_on_go_live:type_name -> google.protobuf.BoolValue
	52,  // 80: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.NotificationSettings.enable_burst_reaction_notifications:type_name -> google.protobuf.BoolValue
	52,  // 81: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.NotificationSettings.quiet_mode:type_name -> google.protobuf.BoolValue
	52,  // 82: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.allow_activity_party_privacy_friends:type_name -> google.protobuf.BoolValue
	52,  // 83: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.allow_activity_party_privacy_voice_channel:type_name -> google.protobuf.BoolValue
	52,  // 84: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.detect_platform_accounts:type_name -> google.protobuf.BoolValue
	52,  // 85: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.passwordless:type_name -> google.protobuf.BoolValue
	52,  // 86: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.contact_sync_enabled:type_name -> google.protobuf.BoolValue
	53,  // 87: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.friend_source_flags:type_name -> google.protobuf.UInt32Value
	53,  // 88: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.friend_discovery_flags:type_name -> google.protobuf.UInt32Value
	3,   // 89: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.default_guilds_activity_restricted:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildActivityStatusRestrictionDefault
	52,  // 90: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.default_message_request_restricted:type_name -> google.protobuf.BoolValue
	52,  // 91: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.drops_opted_out:type_name -> google.protobuf.BoolValue
	52,  // 92: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.non_spam_retraining_opt_in:type_name -> google.protobuf.BoolValue
	52,  // 93: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.family_center_enabled:type_name -> google.protobuf.BoolValue
	52,  // 94: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.family_center_enabled_v2:type_name -> google.protobuf.BoolValue
	52,  // 95: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.hide_legacy_username:type_name -> google.protobuf.BoolValue
	52,  // 96: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.inappropriate_conversation_warnings:type_name -> google.protobuf.BoolValue
	52,  // 97: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.PrivacySettings.recent_games_enabled:type_name -> google.protobuf.BoolValue
	52,  // 98: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.DebugSettings.rtc_panel_show_voice_states:type_name -> google.protobuf.BoolValue
	52,  // 99: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GameLibrarySettings.install_shortcut_desktop:type_name -> google.protobuf.BoolValue
	52,  // 100: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GameLibrarySettings.install_shortcut_start_menu:type_name -> google.protobuf.BoolValue
	52,  // 101: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GameLibrarySettings.disable_games_tab:type_name -> google.protobuf.BoolValue
	50,  // 102: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.StatusSettings.status:type_name -> google.protobuf.StringValue
	29,  // 103: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.StatusSettings.custom_status:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CustomStatus
	52,  // 104: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.StatusSettings.show_current_game:type_name -> google.protobuf.BoolValue
	50,  // 105: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.LocalizationSettings.locale:type_name -> google.protobuf.StringValue
	54,  // 106: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.LocalizationSettings.timezone_offset:type_name -> google.protobuf.Int32Value
	53,  // 107: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ClientThemeSettings.background_gradient_preset_id:type_name -> google.protobuf.UInt32Value
	4,   // 108: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AppearanceSettings.theme:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Theme
	32,  // 109: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AppearanceSettings.client_theme_settings:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ClientThemeSettings
	50,  // 110: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AppearanceSettings.channel_list_layout:type_name -> google.protobuf.StringValue
	50,  // 111: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AppearanceSettings.message_previews:type_name -> google.protobuf.StringValue
	52,  // 112: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AppearanceSettings.search_result_exact_count_enabled:type_name -> google.protobuf.BoolValue
	55,  // 113: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolder.id:type_name -> google.protobuf.Int64Value
	50,  // 114: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolder.name:type_name -> google.protobuf.StringValue
	49,  // 115: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolder.color:type_name -> google.protobuf.UInt64Value
	34,  // 116: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolders.folders:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildFolder
	5,   // 117: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.FavoriteChannel.type:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.FavoriteChannelType
	46,  // 118: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Favorites.favorite_channels:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Favorites.FavoriteChannelsEntry
	47,  // 119: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.user:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.UserEntry
	48,  // 120: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.stream:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.StreamEntry
	52,  // 121: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.CommunitiesSettings.disable_home_auto_nav:type_name -> google.protobuf.BoolValue
	52,  // 122: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.BroadcastSettings.allow_friends:type_name -> google.protobuf.BoolValue
	52,  // 123: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.BroadcastSettings.auto_broadcast:type_name -> google.protobuf.BoolValue
	52,  // 124: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ClipsSettings.allow_voice_recording:type_name -> google.protobuf.BoolValue
	11,  // 125: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings.ChannelsEntry.value:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.ChannelSettings
	14,  // 126: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AllGuildSettings.GuildsEntry.value:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.GuildSettings
	16,  // 127: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.UserContentSettings.RecurringDismissibleContentStatesEntry.value:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.RecurringDismissibleContentState
	36,  // 128: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.Favorites.FavoriteChannelsEntry.value:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.FavoriteChannel
	38,  // 129: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.UserEntry.value:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioContextSetting
	38,  // 130: discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioSettings.StreamEntry.value:type_name -> discord_protos.discord_users.v1.PreloadedUserSettings.PreloadedUserSettings.AudioContextSetting
	131, // [131:131] is the sub-list for method output_type
	131, // [131:131] is the sub-list for method input_type
	131, // [131:131] is the sub-list for extension type_name
	131, // [131:131] is the sub-list for extension extendee
	0,   // [0:131] is the sub-list for field type_name
}

func init() { file_protos_PreloadedUserSettings_proto_init() }
func file_protos_PreloadedUserSettings_proto_init() {
	if File_protos_PreloadedUserSettings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_PreloadedUserSettings_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_Versions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_InboxSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_ChannelIconEmoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_CustomNotificationSoundConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_ChannelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_CustomCallSound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_ChannelListSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_GuildSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_AllGuildSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_RecurringDismissibleContentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_UserContentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_VideoFilterBackgroundBlur); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_VideoFilterAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_SoundboardSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_VoiceAndVideoSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_ExplicitContentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_KeywordFilterSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_TextAndImagesSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_NotificationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_PrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_DebugSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_GameLibrarySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_CustomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_StatusSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_LocalizationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_ClientThemeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_AppearanceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_GuildFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_GuildFolders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_FavoriteChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_Favorites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_AudioContextSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_AudioSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_CommunitiesSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_BroadcastSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_PreloadedUserSettings_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadedUserSettings_ClipsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_PreloadedUserSettings_proto_msgTypes[0].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[3].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[4].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[5].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[7].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[8].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[11].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[15].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[17].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[18].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[19].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[20].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[21].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[22].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[24].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[25].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[26].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[27].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[28].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[34].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[35].OneofWrappers = []any{}
	file_protos_PreloadedUserSettings_proto_msgTypes[36].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_PreloadedUserSettings_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_PreloadedUserSettings_proto_goTypes,
		DependencyIndexes: file_protos_PreloadedUserSettings_proto_depIdxs,
		EnumInfos:         file_protos_PreloadedUserSettings_proto_enumTypes,
		MessageInfos:      file_protos_PreloadedUserSettings_proto_msgTypes,
	}.Build()
	File_protos_PreloadedUserSettings_proto = out.File
	file_protos_PreloadedUserSettings_proto_rawDesc = nil
	file_protos_PreloadedUserSettings_proto_goTypes = nil
	file_protos_PreloadedUserSettings_proto_depIdxs = nil
}
